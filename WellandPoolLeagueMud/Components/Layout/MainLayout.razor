@inherits LayoutComponentBase
@implements IDisposable
@using WellandPoolLeagueMud.Components.Buttons
@using WellandPoolLeagueMud.Components.Themes
@using WellandPoolLeagueMud.Services
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject AppState AppState

<MudThemeProvider Theme="_poolLeagueTheme" @bind-IsDarkMode="@useDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="6">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        <MudAvatar Size="Size.Medium" Variant="Variant.Filled" Color="Color.Transparent" Elevation="2">
            <MudImage Src="Images/appicon.png" Fluid="true" />
        </MudAvatar>
        <MudText Typo="Typo.h5" Class="ml-3 league-name-text">Welland Pool League</MudText>
        <MudSpacer />
        @if (AppState.IsLoggedIn)
        {
            <MudText Typo="Typo.subtitle1" Class="mr-2 user-name-text">Hello, @AppState.Username</MudText>
        }
        &nbsp;
        <MudTooltip Text="Only League Admins need to log in." Placement="Placement.Bottom">
            <LoginButton />
        </MudTooltip>
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="6">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4" Style="margin-top: 20px; margin-bottom: 50px;">
        <MudPaper id="main-content-paper" Class="pa-5 ma-2" Elevation="2">
            @if ((AppState.Roles == "League_Admin" || AppState.Roles == "Super_User") && IsAdminPage())
            {
                <MudAlert Severity="Severity.Info" Elevation="25" Variant="Variant.Filled" Dense="true" Class="text-center mb-4">
                    You are logged in as an Admin user. Be careful when editing data.
                    <br />
                    There is no deleting allowed, contact Chris Wiley if something needs to be removed.
                </MudAlert>
            }
            @Body
        </MudPaper>
    </MudMainContent>
    <MudAppBar Bottom="true" Elevation="6" Dense="true">
        <MudSpacer />
        <MudText Typo="Typo.caption" Class="text-center">
            &copy; @DateTime.Now.Year Welland Pool League
        </MudText>
        <MudDivider DividerType="DividerType.Inset" />
        &nbsp;
        <MudText Typo="Typo.caption" Align="Align.Center">Developed and Maintained by <MudLink Href="https://chriswiley.codersden.com" Typo="Typo.caption">Chris Wiley</MudLink></MudText>
        &nbsp
        <MudDivider DividerType="DividerType.Inset" />
        <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" />
        <MudText Typo="Typo.caption">udBlazor</MudText>
        <MudSpacer />
    </MudAppBar>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private readonly MudTheme _poolLeagueTheme = new PoolLeagueTheme();
    private bool _drawerOpen = true;
    private bool useDarkMode = true;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to the state change event
        AppState.OnChange += StateHasChanged;

        if (authenticationState is not null)
        {
            var state = await authenticationState;
            // Set the user in the central state service
            AppState.SetUser(state.User);
        }
    }

    private bool IsAdminPage()
    {
        var absolutePath = new Uri(NavManager.Uri).AbsolutePath;
        return absolutePath.StartsWith("/admin");
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    // Unsubscribe from the event when the component is destroyed to prevent memory leaks
    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}