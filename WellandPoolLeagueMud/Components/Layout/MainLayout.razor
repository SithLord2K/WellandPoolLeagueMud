@inherits LayoutComponentBase
@implements IDisposable
@using WellandPoolLeagueMud.Components.Buttons
@using WellandPoolLeagueMud.Components.Themes
@using WellandPoolLeagueMud.Data.Services
@using System.Security.Claims
@inject ISnackbar Snackbar
@inject NavigationManager NavManager
@inject AppState AppState

<MudThemeProvider Theme="_poolLeagueTheme" @bind-IsDarkMode="@useDarkMode" />
<MudDialogProvider />
<MudPopoverProvider />
<MudSnackbarProvider Position="Defaults.Classes.Position.BottomRight" />

<MudLayout>
    <MudAppBar Elevation="6">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="DrawerToggle" />
        <MudAvatar Size="Size.Medium" Variant="Variant.Filled" Color="Color.Transparent" Elevation="2">
            <MudImage Src="Images/appicon.png" Fluid="true" />
        </MudAvatar>
        <MudText Typo="Typo.h5" Class="ml-3 league-name-text">Welland Pool League</MudText>
        <MudSpacer />
        @if (AppState.IsLoggedIn && AppState.Roles.FirstOrDefault() != null)
        {
            <MudText Typo="Typo.subtitle1">Hello, @AppState.Username (@AppState.Roles.FirstOrDefault())</MudText>

            <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudAvatar Size="Size.Medium" Color="Color.Tertiary" Variant=Variant.Outlined Style="margin-left: 8px; cursor: pointer;">
                        @if (!string.IsNullOrEmpty(_userPicture))
                        {
                            <MudImage Src="@_userPicture" Alt="User Avatar" />
                        }
                        else
                        {
                            @_userInitials
                        }
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Person">My Profile</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem>
                        <LoginButton />
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        else if (AppState.IsLoggedIn && AppState.Roles.FirstOrDefault() == null)
        {
            <MudText Typo="Typo.subtitle1">Hello, @AppState.Username (No Role)</MudText>

            <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudAvatar Size="Size.Small" Color="Color.Primary" Style="margin-left: 8px; cursor: pointer;">
                        @if (!string.IsNullOrEmpty(_userPicture))
                        {
                            <MudImage Src="@_userPicture" Alt="User Avatar" />
                        }
                        else
                        {
                            @_userInitials
                        }
                    </MudAvatar>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Person">My Profile</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem>
                        <LoginButton />
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
        else
        {
            <LoginButton />
        }
    </MudAppBar>
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="6">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="pt-16 pa-4" Style="margin-top: 20px; margin-bottom: 50px;">
        <MudPaper id="main-content-paper" Class="pa-5 ma-2" Elevation="2">
            @if ((AppState.Roles.Contains("League_Admin") || AppState.Roles.Contains("Super_User")) && IsAdminPage())
            {
                <MudAlert Severity="Severity.Info" Elevation="25" Variant="Variant.Filled" Dense="true" Class="text-center mb-4">
                    You are logged in as an Admin user. Be careful when editing data.
                    <br />
                    There is no deleting allowed, contact Chris Wiley if something needs to be removed.
                </MudAlert>
            }
            @Body
        </MudPaper>
    </MudMainContent>
    <MudAppBar Bottom="true" Elevation="6" Dense="true">
        <MudSpacer />
        <MudText Typo="Typo.caption" Class="text-center">
            &copy; @DateTime.Now.Year Welland Pool League
        </MudText>
        <MudDivider DividerType="DividerType.Inset" />
        &nbsp;
        <MudText Typo="Typo.caption" Align="Align.Center">Developed and Maintained by <MudLink Href="https://chriswiley.codersden.com" Typo="Typo.caption">Chris Wiley</MudLink></MudText>
        &nbsp
        <MudDivider DividerType="DividerType.Inset" />
        <MudIcon Icon="@Icons.Custom.Brands.MudBlazor" />
        <MudText Typo="Typo.caption">udBlazor</MudText>
        <MudSpacer />
    </MudAppBar>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private readonly MudTheme _poolLeagueTheme = new PoolLeagueTheme();
    private bool _drawerOpen = true;
    private bool useDarkMode = true;
    private string? _userPicture;
    private string? _userInitials;

    protected override async Task OnInitializedAsync()
    {
        AppState.OnChange += StateHasChanged;

        if (authenticationState is not null)
        {
            var state = await authenticationState;
            AppState.SetUser(state.User);

            LoadUserAvatarInfo(state.User);
        }
    }

    private void LoadUserAvatarInfo(ClaimsPrincipal user)
    {
        if (user.Identity is { IsAuthenticated: true })
        {
            _userPicture = user.Claims.FirstOrDefault(c => c.Type == "picture")?.Value
                          ?? user.Claims.FirstOrDefault(c => c.Type == "https://wpl.codersden.com/picture")?.Value
                          ?? user.Claims.FirstOrDefault(c => c.Type.Contains("picture"))?.Value
                          ?? user.Claims.FirstOrDefault(c => c.Type == "avatar")?.Value;

            var firstName = user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname")?.Value
                           ?? user.FindFirst(ClaimTypes.GivenName)?.Value;
            var lastName = user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname")?.Value
                          ?? user.FindFirst(ClaimTypes.Surname)?.Value;
            var nickname = user.FindFirst("nickname")?.Value;
            var name = user.FindFirst("name")?.Value;

            if (!string.IsNullOrEmpty(firstName) && !string.IsNullOrEmpty(lastName))
            {
                _userInitials = $"{firstName[0]}{lastName[0]}".ToUpper();
            }
            else if (!string.IsNullOrEmpty(firstName))
            {
                _userInitials = firstName[0].ToString().ToUpper();
            }
            else if (!string.IsNullOrEmpty(nickname))
            {
                _userInitials = nickname[0].ToString().ToUpper();
            }
            else if (!string.IsNullOrEmpty(name))
            {
                var nameParts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                if (nameParts.Length >= 2)
                {
                    _userInitials = $"{nameParts[0][0]}{nameParts[1][0]}".ToUpper();
                }
                else
                {
                    _userInitials = nameParts[0][0].ToString().ToUpper();
                }
            }
            else
            {
                _userInitials = "U";
            }
        }
    }

    private bool IsAdminPage()
    {
        var absolutePath = new Uri(NavManager.Uri).AbsolutePath;
        return absolutePath.StartsWith("/admin");
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}