@page "/admin/playerdata"
@attribute [Authorize(Roles = "League_Admin,Super_User")]
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using MudBlazor
@inject IPlayerGameService PlayerGameService
@inject IPlayerService PlayerService
@inject ITeamService TeamService
@inject ISnackbar Snackbar

<PageTitle>Add Player Games</PageTitle>

<MudContainer>
    <MudGrid Justify="Justify.Center" Spacing="4">
        <MudItem xs="12" sm="10" md="8">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Add/Edit Player Games</MudText>
                <MudForm>
                    <MudGrid>
                        @if (isLoading)
                        {
                            <MudItem xs="12" Class="d-flex justify-center py-8">
                                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudSelect T="int"
                                           Label="Choose Player to Add Games To"
                                           Value="selectedPlayerId"
                                           ValueChanged="LoadPlayerDataAsync"
                                           Dense="true"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int" Value="0">Choose Player To Add Games To</MudSelectItem>
                                    @if (allPlayers is not null)
                                    {
                                        @foreach (var player in allPlayers)
                                        {
                                            <MudSelectItem T="int" Value="player.PlayerId">@player.FullName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            @if (selectedPlayerId != 0 && selectedPlayerId > 0)
                            {
                                <MudItem xs="12" sm="6">
                                    <MudTextField T="string"
                                                  Label="Player Name"
                                                  Value="@GetPlayerName(selectedPlayerId)"
                                                  Variant="Variant.Filled"
                                                  Disabled />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudSelect T="int"
                                               Label="Team"
                                               @bind-Value="playerGame.TeamId"
                                               Variant="Variant.Filled"
                                               Dense="true"
                                               Required>
                                        <MudSelectItem T="int" Value="0">Select Team</MudSelectItem>
                                        @if (allTeams is not null)
                                        {
                                            @foreach (var team in allTeams)
                                            {
                                                <MudSelectItem T="int" Value="team.TeamId">@team.TeamName</MudSelectItem>
                                            }
                                        }
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="12" sm="6">
                                    <MudNumericField T="int"
                                                     Label="Week Number"
                                                     Value="playerGame.WeekNumber"
                                                     Min="1"
                                                     Max="52"
                                                     Variant="Variant.Filled"
                                                     ValueChanged="CheckExistingGameAsync" />
                                </MudItem>

                                <MudItem xs="12" sm="6">
                                    <MudDatePicker Label="Game Date"
                                                   @bind-Date="gameDate"
                                                   PickerVariant="PickerVariant.Dialog"
                                                   Variant="Variant.Filled" />
                                </MudItem>

                                <MudItem xs="12" sm="3">
                                    <MudNumericField T="int"
                                                     Label="Wins"
                                                     @bind-Value="playerGame.Wins"
                                                     Min="0"
                                                     Variant="Variant.Filled" />
                                </MudItem>

                                <MudItem xs="12" sm="3">
                                    <MudNumericField T="int"
                                                     Label="Losses"
                                                     @bind-Value="playerGame.Losses"
                                                     Min="0"
                                                     Variant="Variant.Filled" />
                                </MudItem>
                                <MudItem xs="12">
                                    <MudTextField T="string"
                                                  Label="Notes (Optional)"
                                                  @bind-Value="playerGame.Notes"
                                                  Variant="Variant.Filled"
                                                  Lines="3"
                                                  MaxLength="500" />
                                </MudItem>

                                @if (existingGame != null)
                                {
                                    <MudItem xs="12">
                                        <MudAlert Severity="Severity.Info">
                                            <MudText>Existing game found for this player and week. Editing will update the existing record.</MudText>
                                        </MudAlert>
                                    </MudItem>
                                }

                                <MudItem xs="12" Class="d-flex justify-start gap-4 mt-4">
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Tertiary"
                                               OnClick="AddOrUpdatePlayerGameAsync"
                                               Disabled="selectedPlayerId == 0 || playerGame.WeekNumber == 0 || playerGame.TeamId == 0">
                                        @(existingGame != null ? "Update Player Game" : "Save Player Game")
                                    </MudButton>
                                    <MudButton Variant="Variant.Filled"
                                               Color="Color.Error"
                                               StartIcon="@Icons.Material.Filled.Refresh"
                                               OnClick="ResetForm">Reset</MudButton>
                                    @if (existingGame != null)
                                    {
                                        <AuthorizeView Roles="Super_User">
                                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="DeletePlayerGameAsync">Delete Game</MudButton>
                                        </AuthorizeView>
                                    }
                                </MudItem>
                            }
                        }
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudItem>

        @if (selectedPlayerId > 0 && playerGamesForPlayer is not null && playerGamesForPlayer.Any())
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">@GetPlayerName(selectedPlayerId) - Game History</MudText>
                    <MudTable Items="playerGamesForPlayer" Dense="true" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Week</MudTh>
                            <MudTh>Team</MudTh>
                            <MudTh>Date</MudTh>
                            <MudTh>Record</MudTh>
                            <MudTh>Notes</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Week">@context.WeekNumber</MudTd>
                            <MudTd DataLabel="Team">@context.TeamName</MudTd>
                            <MudTd DataLabel="Date">@context.GameDate.ToString("MM/dd/yyyy")</MudTd>
                            <MudTd DataLabel="Record">
                                @context.Wins / @context.Losses
                            </MudTd>
                            <MudTd DataLabel="Notes">@(string.IsNullOrEmpty(context.Notes) ? "-" : context.Notes)</MudTd>
                            <MudTd DataLabel="Actions">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               OnClick="@(() => EditPlayerGame(context))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private PlayerGameViewModel playerGame = new();
    private int selectedPlayerId;
    private List<PlayerViewModel>? allPlayers;
    private List<TeamViewModel>? allTeams;
    private List<PlayerGameViewModel>? allPlayerGames;
    private List<PlayerGameViewModel>? playerGamesForPlayer;
    private PlayerGameViewModel? existingGame;
    private bool isLoading = true;
    private DateTime? gameDate = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        SetInitialWeekNumber();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            allPlayers = await PlayerService.GetAllPlayersAsync();
            allTeams = await TeamService.GetAllTeamsAsync();
            allPlayerGames = await PlayerGameService.GetAllPlayerGamesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetInitialWeekNumber()
    {
        if (allPlayerGames is not null && allPlayerGames.Any())
        {
            playerGame.WeekNumber = allPlayerGames.Max(x => x.WeekNumber) + 1;
        }
        else
        {
            playerGame.WeekNumber = 1;
        }
    }

    private string GetPlayerName(int? playerId)
    {
        if (allPlayers is not null && playerId.HasValue)
        {
            var player = allPlayers.FirstOrDefault(p => p.PlayerId == playerId.Value);
            return player?.FullName ?? string.Empty;
        }
        return string.Empty;
    }

    private async Task LoadPlayerDataAsync(int playerId)
    {
        selectedPlayerId = playerId;
        if (selectedPlayerId > 0)
        {
            try
            {
                playerGame.PlayerId = selectedPlayerId;
                playerGamesForPlayer = await PlayerGameService.GetPlayerGamesByPlayerAsync(selectedPlayerId);

                var selectedPlayer = allPlayers?.FirstOrDefault(p => p.PlayerId == selectedPlayerId);
                if (selectedPlayer?.TeamId != null)
                {
                    playerGame.TeamId = selectedPlayer.TeamId.Value;
                }

                await CheckExistingGameAsync(playerGame.WeekNumber);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading player data: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            ResetForm();
        }
    }

    private async Task CheckExistingGameAsync(int weekNumber)
    {
        playerGame.WeekNumber = weekNumber;

        if (allPlayerGames is not null && selectedPlayerId > 0)
        {
            existingGame = allPlayerGames.FirstOrDefault(x => x.WeekNumber == weekNumber && x.PlayerId == selectedPlayerId);
            if (existingGame is not null)
            {
                playerGame = new PlayerGameViewModel
                {
                    PlayerGameId = existingGame.PlayerGameId,
                    PlayerId = existingGame.PlayerId,
                    TeamId = existingGame.TeamId,
                    WeekNumber = existingGame.WeekNumber,
                    Wins = existingGame.Wins,
                    Losses = existingGame.Losses,
                    GameDate = existingGame.GameDate,
                    Notes = existingGame.Notes
                };
                gameDate = existingGame.GameDate;
            }
            else
            {
                var currentTeamId = playerGame.TeamId;

                playerGame.PlayerGameId = 0;
                playerGame.Wins = 0;
                playerGame.Losses = 0;
                playerGame.Notes = string.Empty;
                if (gameDate.HasValue)
                    playerGame.GameDate = gameDate.Value;

                playerGame.TeamId = currentTeamId;
            }
        }
        await Task.CompletedTask;
    }

    private void EditPlayerGame(PlayerGameViewModel game)
    {
        playerGame = new PlayerGameViewModel
        {
            PlayerGameId = game.PlayerGameId,
            PlayerId = game.PlayerId,
            TeamId = game.TeamId,
            WeekNumber = game.WeekNumber,
            Wins = game.Wins,
            Losses = game.Losses,
            GameDate = game.GameDate,
            Notes = game.Notes
        };
        gameDate = game.GameDate;
        existingGame = game;
    }

    private async Task AddOrUpdatePlayerGameAsync()
    {
        if (selectedPlayerId > 0 && playerGame.TeamId > 0)
        {
            try
            {
                if (gameDate.HasValue)
                    playerGame.GameDate = gameDate.Value;

                var isNewGame = playerGame.PlayerGameId == 0;
                PlayerGameViewModel? result;

                if (isNewGame)
                {
                    result = await PlayerGameService.CreatePlayerGameAsync(playerGame);
                }
                else
                {
                    result = await PlayerGameService.UpdatePlayerGameAsync(playerGame);
                }

                if (result != null)
                {
                    var message = isNewGame ? "Game added successfully!" : "Game updated successfully!";
                    Snackbar.Add(message, Severity.Success);
                    await LoadDataAsync();
                    await LoadPlayerDataAsync(selectedPlayerId);
                    ResetForm();
                }
                else
                {
                    Snackbar.Add("Failed to save game. Please try again.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error saving game: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeletePlayerGameAsync()
    {
        if (existingGame?.PlayerGameId > 0)
        {
            try
            {
                var success = await PlayerGameService.DeletePlayerGameAsync(existingGame.PlayerGameId);

                if (success)
                {
                    Snackbar.Add("Game deleted successfully!", Severity.Success);
                    await LoadDataAsync();
                    await LoadPlayerDataAsync(selectedPlayerId);
                    ResetForm();
                }
                else
                {
                    Snackbar.Add("Failed to delete game. Please try again.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting game: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ResetForm()
    {
        var selectedPlayer = allPlayers?.FirstOrDefault(p => p.PlayerId == selectedPlayerId);
        var currentTeamId = selectedPlayer?.TeamId ?? 0;

        playerGame = new PlayerGameViewModel
        {
            PlayerId = selectedPlayerId,
            TeamId = currentTeamId,
            Wins = 0,
            Losses = 0
        };
        existingGame = null;
        gameDate = DateTime.Today;
        SetInitialWeekNumber();
    }
}