@page "/admin/players"
@attribute [Authorize(Roles = "League_Admin,Super_User")]
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Data.Services
@using MudBlazor
@inject ISnackbar Snackbar
@inject IPlayerService PlayerService
@inject ITeamService TeamService

<PageTitle>Players Administration</PageTitle>

<MudContainer>
    <MudGrid Justify="Justify.Center" Spacing="4">
        <MudItem xs="12" sm="8" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Add/Edit Player</MudText>
                <MudForm>
                    <MudGrid>
                        @if (isLoading)
                        {
                            <MudItem xs="12" Class="d-flex justify-center py-8">
                                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudSelect T="int?"
                                           Label="Choose Player to Edit"
                                           Value="player.PlayerId == 0 ? null : player.PlayerId"
                                           ValueChanged="LoadPlayerAsync"
                                           Dense="true"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int?" Value="null">Create New Player</MudSelectItem>
                                    @if (allPlayers is not null)
                                    {
                                        @foreach (var p in allPlayers)
                                        {
                                            <MudSelectItem T="int?" Value="p.PlayerId">@p.FullName @(p.TeamName != null ? $"({p.TeamName})" : "")</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField T="string"
                                              Label="First Name"
                                              @bind-Value="player.FirstName"
                                              Required
                                              Variant="Variant.Filled" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField T="string"
                                              Label="Last Name"
                                              @bind-Value="player.LastName"
                                              Variant="Variant.Filled" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudSelect T="int?"
                                           Label="Team"
                                           @bind-Value="player.TeamId"
                                           Variant="Variant.Filled"
                                           Dense="true"
                                           Clearable="true">
                                    <MudSelectItem T="int?" Value="null">No Team Assigned</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var team in allTeams)
                                        {
                                            <MudSelectItem T="int?" Value="team.TeamId">@team.TeamName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            @if (player.PlayerId > 0)
                            {
                                <MudItem xs="12">
                                    <MudDivider Class="my-4" />
                                    <MudText Typo="Typo.h6" Class="mb-2">Player Statistics</MudText>
                                    <MudGrid>
                                        <MudItem xs="6" sm="3">
                                            <MudText Typo="Typo.subtitle2">Games Played:</MudText>
                                            <MudText Typo="Typo.body1">@player.GamesPlayed</MudText>
                                        </MudItem>
                                        <MudItem xs="6" sm="3">
                                            <MudText Typo="Typo.subtitle2">Wins:</MudText>
                                            <MudText Typo="Typo.body1">@player.GamesWon</MudText>
                                        </MudItem>
                                        <MudItem xs="6" sm="3">
                                            <MudText Typo="Typo.subtitle2">Losses:</MudText>
                                            <MudText Typo="Typo.body1">@player.GamesLost</MudText>
                                        </MudItem>
                                        <MudItem xs="6" sm="3">
                                            <MudText Typo="Typo.subtitle2">Win %:</MudText>
                                            <MudText Typo="Typo.body1">@player.WinPercentage.ToString("F1")%</MudText>
                                        </MudItem>
                                    </MudGrid>
                                </MudItem>
                            }

                            <MudItem xs="12" Class="d-flex justify-start gap-4 mt-4">
                                <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="SavePlayerAsync">
                                    @(player.PlayerId == 0 ? "Create Player" : "Update Player")
                                </MudButton>
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Refresh"
                                           OnClick="ResetForm">Reset</MudButton>
                                @if (player.PlayerId > 0)
                                {
                                    <AuthorizeView Roles="Super_User">
                                        <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="DeletePlayerAsync">Delete Player</MudButton>
                                    </AuthorizeView>
                                }
                            </MudItem>
                        }
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudItem>

        @if (selectedTeamPlayers is not null && selectedTeamPlayers.Any())
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">
                        @(player.TeamName ?? "Selected Team") - Team Roster
                    </MudText>
                    <MudTable Items="selectedTeamPlayers" Dense="true" Hover="true" Striped="true">
                        <HeaderContent>
                            <MudTh>Player Name</MudTh>
                            <MudTh Style="text-align: center;">Games</MudTh>
                            <MudTh Style="text-align: center;">Wins</MudTh>
                            <MudTh Style="text-align: center;">Losses</MudTh>
                            <MudTh Style="text-align: center;">Win %</MudTh>
                            <MudTh Style="text-align: center;">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Player Name">
                                <div class="d-flex align-center">
                                    @if (context.PlayerId == player.PlayerId)
                                    {
                                        <MudChip T="string" Color="Color.Primary" Size="Size.Small" Variant="Variant.Filled">New</MudChip>
                                    }
                                    @context.FullName
                                </div>
                            </MudTd>
                            <MudTd DataLabel="Games" Style="text-align: center;">@context.GamesPlayed</MudTd>
                            <MudTd DataLabel="Wins" Style="text-align: center;">@context.GamesWon</MudTd>
                            <MudTd DataLabel="Losses" Style="text-align: center;">@context.GamesLost</MudTd>
                            <MudTd DataLabel="Win %" Style="text-align: center;">@context.WinPercentage.ToString("F1")%</MudTd>
                            <MudTd DataLabel="Actions" Style="text-align: center;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               Color="Color.Primary"
                                               OnClick="@(() => EditPlayer(context))" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }

        @if (allPlayers is not null && allPlayers.Any())
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h6" Class="mb-4">All Players</MudText>
                    <MudTable Items="allPlayers" Dense="true" Hover="true" Striped="true" Filter="new Func<PlayerViewModel, bool>(FilterPlayers)">
                        <ToolBarContent>
                            <MudTextField @bind-Value="searchString" Placeholder="Search players..." Adornment="Adornment.Start"
                                          AdornmentIcon="Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                            <MudSpacer />
                            <MudSelect T="int?"
                                       @bind-Value="teamFilter"
                                       Label="Filter by Team"
                                       Variant="Variant.Outlined"
                                       Margin="Margin.Dense"
                                       Dense="true"
                                       Clearable="true">
                                <MudSelectItem T="int?" Value="null">All Teams</MudSelectItem>
                                @if (allTeams is not null)
                                {
                                    @foreach (var team in allTeams)
                                    {
                                        <MudSelectItem T="int?" Value="team.TeamId">@team.TeamName</MudSelectItem>
                                    }
                                }
                                <MudSelectItem T="int?" Value="-1">No Team</MudSelectItem>
                            </MudSelect>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh>Player Name</MudTh>
                            <MudTh>Team</MudTh>
                            <MudTh Style="text-align: center;">Games</MudTh>
                            <MudTh Style="text-align: center;">Wins</MudTh>
                            <MudTh Style="text-align: center;">Losses</MudTh>
                            <MudTh Style="text-align: center;">Win %</MudTh>
                            <MudTh Style="text-align: center;">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Player Name">@context.FullName</MudTd>
                            <MudTd DataLabel="Team">
                                @if (string.IsNullOrEmpty(context.TeamName))
                                {
                                    <MudChip T="string" Color="Color.Default" Size="Size.Small" Variant="Variant.Outlined">No Team</MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Small">@context.TeamName</MudChip>
                                }
                            </MudTd>
                            <MudTd DataLabel="Games" Style="text-align: center;">@context.GamesPlayed</MudTd>
                            <MudTd DataLabel="Wins" Style="text-align: center;">@context.GamesWon</MudTd>
                            <MudTd DataLabel="Losses" Style="text-align: center;">@context.GamesLost</MudTd>
                            <MudTd DataLabel="Win %" Style="text-align: center;">@context.WinPercentage.ToString("F1")%</MudTd>
                            <MudTd DataLabel="Actions" Style="text-align: center;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Size="Size.Small"
                                               Color="Color.Primary"
                                               OnClick="@(() => EditPlayer(context))" />
                            </MudTd>
                        </RowTemplate>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private PlayerViewModel player = new();
    private List<PlayerViewModel>? allPlayers;
    private List<TeamViewModel>? allTeams;
    private List<PlayerViewModel>? selectedTeamPlayers;
    private bool isLoading = true;
    private string searchString = "";
    private int? teamFilter = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            allPlayers = await PlayerService.GetAllPlayersAsync();
            allTeams = await TeamService.GetAllTeamsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadPlayerAsync(int? playerId)
    {
        if (playerId.HasValue && playerId > 0)
        {
            try
            {
                var selectedPlayer = await PlayerService.GetPlayerByIdAsync(playerId.Value);
                if (selectedPlayer != null)
                {
                    player = selectedPlayer;
                    await LoadTeamRoster();
                }
                else
                {
                    Snackbar.Add("Player not found", Severity.Warning);
                    ResetForm();
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading player: {ex.Message}", Severity.Error);
                ResetForm();
            }
        }
        else
        {
            ResetForm();
        }
    }

    private async Task LoadTeamRoster()
    {
        if (player.TeamId.HasValue)
        {
            try
            {
                selectedTeamPlayers = await PlayerService.GetPlayersByTeamAsync(player.TeamId.Value);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading team roster: {ex.Message}", Severity.Error);
                selectedTeamPlayers = null;
            }
        }
        else
        {
            selectedTeamPlayers = null;
        }
    }

    private async Task SavePlayerAsync()
    {
        if (string.IsNullOrWhiteSpace(player.FirstName))
        {
            Snackbar.Add("First name is required", Severity.Warning);
            return;
        }

        try
        {
            var isNewPlayer = player.PlayerId == 0;
            PlayerViewModel? result;

            if (isNewPlayer)
            {
                result = await PlayerService.CreatePlayerAsync(player);
            }
            else
            {
                result = await PlayerService.UpdatePlayerAsync(player);
            }

            if (result != null)
            {
                var message = isNewPlayer ? "Player created successfully!" : "Player updated successfully!";
                Snackbar.Add(message, Severity.Success);
                await LoadDataAsync();
                ResetForm();
                await LoadTeamRoster();
            }
            else
            {
                Snackbar.Add("Failed to save player. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving player: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeletePlayerAsync()
    {
        if (player.PlayerId == 0) return;

        try
        {
            var success = await PlayerService.DeletePlayerAsync(player.PlayerId);

            if (success)
            {
                Snackbar.Add("Player deleted successfully!", Severity.Success);
                await LoadDataAsync();
                ResetForm();
            }
            else
            {
                Snackbar.Add("Failed to delete player. They may have game records that prevent deletion.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting player: {ex.Message}", Severity.Error);
        }
    }

    private void EditPlayer(PlayerViewModel playerToEdit)
    {
        player = new PlayerViewModel
        {
            PlayerId = playerToEdit.PlayerId,
            FirstName = playerToEdit.FirstName,
            LastName = playerToEdit.LastName,
            TeamId = playerToEdit.TeamId,
            TeamName = playerToEdit.TeamName,
            GamesPlayed = playerToEdit.GamesPlayed,
            GamesWon = playerToEdit.GamesWon,
            GamesLost = playerToEdit.GamesLost
        };
    }

    private bool FilterPlayers(PlayerViewModel p)
    {
        // Search filter
        var matchesSearch = string.IsNullOrWhiteSpace(searchString) ||
            p.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
            (p.TeamName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false);

        // Team filter
        var matchesTeam = teamFilter == null ||
            (teamFilter == -1 && p.TeamId == null) ||
            p.TeamId == teamFilter;

        return matchesSearch && matchesTeam;
    }

    private void ResetForm()
    {
        player = new PlayerViewModel();
        selectedTeamPlayers = null;
    }
}