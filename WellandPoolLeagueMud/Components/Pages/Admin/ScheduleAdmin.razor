@page "/admin/schedules"
@attribute [Authorize(Roles = "League_Admin,Super_User")]
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using MudBlazor
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IScheduleService ScheduleService
@inject ITeamService TeamService

<PageTitle>Schedules Administration</PageTitle>

<MudContainer>
    <MudGrid Justify="Justify.Center" Spacing="4">
        <MudItem xs="12" sm="10" md="8">
            <MudPaper Class="pa-4" Elevation="3">
                <MudText Typo="Typo.h5" Class="mb-4">Add/Edit Schedule</MudText>

                @if (isLoading)
                {
                    <div class="d-flex justify-center py-8">
                        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                    </div>
                }
                else
                {
                    <MudForm @ref="form" Model="@schedule">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudSelect T="int"
                                           Label="Select Schedule to Edit"
                                           Value="selectedScheduleId"
                                           ValueChanged="@LoadSchedule"
                                           Variant="Variant.Filled"
                                           AdornmentIcon="@Icons.Material.Filled.Schedule"
                                           Adornment="Adornment.Start">
                                    <MudSelectItem T="int" Value="0">Create New Schedule</MudSelectItem>
                                    @if (allSchedules is not null && allTeams is not null)
                                    {
                                        @foreach (var s in allSchedules.OrderBy(x => x.WeekNumber).ThenBy(x => x.GameDate))
                                        {
                                            var homeTeamName = allTeams.FirstOrDefault(x => x.TeamId == s.HomeTeamId)?.TeamName ?? "N/A";
                                            var awayTeamName = allTeams.FirstOrDefault(x => x.TeamId == s.AwayTeamId)?.TeamName ?? "N/A";
                                            <MudSelectItem T="int" Value="@s.ScheduleId">
                                                Week @s.WeekNumber - @s.GameDate?.ToShortDateString() - @homeTeamName vs @awayTeamName
                                            </MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudDatePicker Label="Game Date"
                                               @bind-Date="schedule.GameDate"
                                               DateFormat="MM/dd/yyyy"
                                               PickerVariant="PickerVariant.Dialog"
                                               Variant="Variant.Filled"
                                               Required="true"
                                               RequiredError="Game date is required"
                                               AdornmentIcon="@Icons.Material.Filled.CalendarToday"
                                               Adornment="Adornment.Start" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudNumericField T="int"
                                                 Label="Week Number"
                                                 @bind-Value="schedule.WeekNumber"
                                                 Min="1"
                                                 Max="52"
                                                 Required="true"
                                                 RequiredError="Week number is required"
                                                 Variant="Variant.Filled"
                                                 AdornmentIcon="@Icons.Material.Filled.Numbers"
                                                 Adornment="Adornment.Start" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudSelect T="int"
                                           Label="Home Team"
                                           @bind-Value="schedule.HomeTeamId"
                                           Required="true"
                                           RequiredError="Home team is required"
                                           Variant="Variant.Filled"
                                           AdornmentIcon="@Icons.Material.Filled.Home"
                                           Adornment="Adornment.Start">
                                    <MudSelectItem T="int" Value="0">Select Home Team</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var team in allTeams.OrderBy(t => t.TeamId))
                                        {
                                            <MudSelectItem T="int" Value="@team.TeamId">@team.TeamName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudSelect T="int"
                                           Label="Away Team"
                                           @bind-Value="schedule.AwayTeamId"
                                           Required="true"
                                           RequiredError="Away team is required"
                                           Variant="Variant.Filled"
                                           AdornmentIcon="@Icons.Material.Filled.Flight"
                                           Adornment="Adornment.Start">
                                    <MudSelectItem T="int" Value="0">Select Away Team</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var team in allTeams.OrderBy(t => t.TeamId))
                                        {
                                            <MudSelectItem T="int" Value="@team.TeamId">@team.TeamName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudSelect T="int?"
                                           Label="Winning Team"
                                           @bind-Value="schedule.WinningTeamId"
                                           Variant="Variant.Filled"
                                           AdornmentIcon="@Icons.Material.Filled.EmojiEvents"
                                           Adornment="Adornment.Start"
                                           HelperText="Select winner to mark game as complete">
                                    <MudSelectItem T="int?" Value="null">Game Not Complete</MudSelectItem>
                                    @if (schedule.HomeTeamId > 0 && allTeams is not null)
                                    {
                                        var homeTeam = allTeams.FirstOrDefault(t => t.TeamId == schedule.HomeTeamId);
                                        if (homeTeam != null)
                                        {
                                            <MudSelectItem T="int?" Value="@schedule.HomeTeamId">@homeTeam.TeamName (Home)</MudSelectItem>
                                        }
                                    }
                                    @if (schedule.AwayTeamId > 0 && allTeams is not null)
                                    {
                                        var awayTeam = allTeams.FirstOrDefault(t => t.TeamId == schedule.AwayTeamId);
                                        if (awayTeam != null)
                                        {
                                            <MudSelectItem T="int?" Value="@schedule.AwayTeamId">@awayTeam.TeamName (Away)</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudTextField T="string"
                                              Label="Table #"
                                              @bind-Value="schedule.Notes"
                                              Lines="1"
                                              Variant="Variant.Filled"
                                              AdornmentIcon="@Icons.Material.Filled.ConfirmationNumber"
                                              Adornment="Adornment.Start"
                                              HelperText="Table number is required for 'Park' teams."
                                              Validation="@(new Func<string, string>(ValidateNotes))" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudCheckBox T="bool" @bind-Checked="schedule.IsComplete"
                                             Label="Mark as Complete"
                                             Color="Color.Success" />
                            </MudItem>

                            <MudItem xs="12" Class="d-flex justify-start gap-4 mt-4">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Tertiary"
                                           StartIcon="@Icons.Material.Filled.Save"
                                           OnClick="SaveScheduleAsync"
                                           Disabled="isProcessing">
                                    @if (isProcessing)
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                        <span class="ml-2">Saving...</span>
                                    }
                                    else
                                    {
                                        <span>@(selectedScheduleId == 0 ? "Add Schedule" : "Update Schedule")</span>
                                    }
                                </MudButton>

                                <MudButton Color="Color.Error"
                                           Variant="Variant.Filled"
                                           StartIcon="@Icons.Material.Filled.Refresh"
                                           OnClick="ResetForm"
                                           Disabled="isProcessing">
                                    Reset
                                </MudButton>

                                @if (selectedScheduleId > 0)
                                {
                                    <AuthorizeView Roles="Super_User">
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Warning"
                                                   StartIcon="@Icons.Material.Filled.Delete"
                                                   OnClick="DeleteScheduleAsync"
                                                   Disabled="isProcessing">
                                            Delete
                                        </MudButton>
                                    </AuthorizeView>
                                }
                            </MudItem>
                        </MudGrid>
                    </MudForm>
                }
            </MudPaper>
        </MudItem>

        @if (allSchedules is not null && allSchedules.Any())
        {
            <MudItem xs="12">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6" Class="mb-4">Current Schedule (@filteredSchedules.Count() games)</MudText>

                    <MudGrid Class="mb-4">
                        <MudItem xs="12" sm="6">
                            <MudNumericField T="int?"
                                             Label="Filter by Week"
                                             Variant="Variant.Outlined"
                                             @bind-Value="filterWeekNumber"
                                             Clearable="true"
                                             Adornment="Adornment.Start"
                                             AdornmentIcon="@Icons.Material.Filled.FilterList" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudDatePicker Label="Filter by Date"
                                           Variant="Variant.Outlined"
                                           @bind-Date="filterGameDate"
                                           Clearable="true"
                                           Adornment="Adornment.Start"
                                           AdornmentIcon="@Icons.Material.Filled.CalendarToday" />
                        </MudItem>
                    </MudGrid>

                    <MudTable Items="@filteredSchedules"
                              Hover="true"
                              Striped="true"
                              Dense="true"
                              T="ScheduleViewModel">
                        <HeaderContent>
                            <MudTh>Week</MudTh>
                            <MudTh>Date</MudTh>
                            <MudTh>Home Team</MudTh>
                            <MudTh>Away Team</MudTh>
                            <MudTh>Winner</MudTh>
                            <MudTh Style="text-align:center;">Status</MudTh>
                            <MudTh Style="text-align:center;">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Week">
                                <MudChip T="string">
                                    Week @context.WeekNumber
                                </MudChip>
                            </MudTd>
                            <MudTd DataLabel="Date">@context.GameDate?.ToShortDateString()</MudTd>
                            <MudTd DataLabel="Home Team">
                                @if (context.IsComplete && context.WinningTeamId == context.HomeTeamId)
                                {
                                    <MudText Style="font-weight: bold;">@context.HomeTeamName</MudText>
                                }
                                else
                                {
                                    <MudText>@context.HomeTeamName</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Away Team">
                                @if (context.IsComplete && context.WinningTeamId == context.AwayTeamId)
                                {
                                    <MudText Style="font-weight: bold;">@context.AwayTeamName</MudText>
                                }
                                else
                                {
                                    <MudText>@context.AwayTeamName</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Winner">
                                @if (context.IsComplete && !string.IsNullOrEmpty(context.WinningTeamName))
                                {
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Icon="@Icons.Material.Filled.EmojiEvents">
                                        @context.WinningTeamName
                                    </MudChip>
                                }
                                else
                                {
                                    <MudText Class="mud-text-secondary">-</MudText>
                                }
                            </MudTd>
                            <MudTd DataLabel="Status" Style="text-align:center;">
                                @if (context.IsComplete)
                                {
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Variant="Variant.Filled">
                                        Complete
                                    </MudChip>
                                }
                                else if (context.GameDate?.Date < DateTime.Today)
                                {
                                    <MudChip T="string" Color="Color.Warning" Size="Size.Small" Variant="Variant.Filled">
                                        Pending
                                    </MudChip>
                                }
                                else
                                {
                                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Variant="Variant.Filled">
                                        Scheduled
                                    </MudChip>
                                }
                            </MudTd>
                            <MudTd DataLabel="Actions" Style="text-align:center;">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => LoadSchedule(context.ScheduleId))" />
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <div class="d-flex flex-column align-center pa-4">
                                <MudIcon Icon="@Icons.Material.Filled.EventBusy" Style="font-size: 2rem; color: var(--mud-palette-text-secondary);" />
                                <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">No schedules match the current filters</MudText>
                            </div>
                        </NoRecordsContent>
                    </MudTable>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private MudForm form = new();
    private ScheduleViewModel schedule = new();
    private List<TeamViewModel>? allTeams;
    private List<ScheduleViewModel>? allSchedules;
    private int selectedScheduleId = 0;
    private bool isLoading = true;
    private bool isProcessing = false;

    private int? filterWeekNumber;
    private DateTime? filterGameDate;

    private IEnumerable<ScheduleViewModel> filteredSchedules =>
        allSchedules?.Where(s =>
            (!filterWeekNumber.HasValue || s.WeekNumber == filterWeekNumber.Value) &&
            (!filterGameDate.HasValue || s.GameDate?.Date == filterGameDate.Value.Date)
        ).OrderBy(s => s.WeekNumber).ThenBy(s => s.GameDate) ?? Enumerable.Empty<ScheduleViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        isLoading = true;
        try
        {
            allSchedules = await ScheduleService.GetAllSchedulesAsync();
            allTeams = await TeamService.GetAllTeamsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void LoadSchedule(int scheduleId)
    {
        selectedScheduleId = scheduleId;

        if (scheduleId > 0)
        {
            var loadedSchedule = allSchedules?.FirstOrDefault(s => s.ScheduleId == scheduleId);
            if (loadedSchedule != null)
            {
                schedule = new ScheduleViewModel(loadedSchedule);
            }
            else
            {
                Snackbar.Add("Schedule not found", Severity.Warning);
                ResetForm();
            }
        }
        else
        {
            ResetForm();
        }
        StateHasChanged();
    }

    private async Task SaveScheduleAsync()
    {
        await form.Validate();
        if (!form.IsValid) return;

        if (schedule.HomeTeamId == schedule.AwayTeamId && schedule.HomeTeamId != 0)
        {
            Snackbar.Add("Home and Away teams cannot be the same.", Severity.Error);
            return;
        }

        if (allSchedules != null)
        {
            var teamsInWeek = allSchedules
                .Where(s => s.WeekNumber == schedule.WeekNumber && s.ScheduleId != selectedScheduleId)
                .SelectMany(s => new[] { s.HomeTeamId, s.AwayTeamId })
                .ToHashSet();

            if (teamsInWeek.Contains(schedule.HomeTeamId))
            {
                Snackbar.Add($"Error: Home Team is already scheduled for Week {schedule.WeekNumber}.", Severity.Error);
                return;
            }
            if (teamsInWeek.Contains(schedule.AwayTeamId))
            {
                Snackbar.Add($"Error: Away Team is already scheduled for Week {schedule.WeekNumber}.", Severity.Error);
                return;
            }
        }

        schedule.IsComplete = schedule.WinningTeamId.HasValue;
        isProcessing = true;

        try
        {
            bool isNewSchedule = selectedScheduleId == 0;

            if (isNewSchedule)
            {
                var result = await ScheduleService.CreateScheduleAsync(schedule);
                Snackbar.Add("Schedule added successfully!", Severity.Success);

                var dateToKeep = schedule.GameDate;
                var weekToKeep = schedule.WeekNumber;

                var parameters = new DialogParameters
                {
                    ["Message"] = "Do you want to add another game for this date?",
                    ["YesText"] = "Yes, Add Another",
                    ["NoText"] = "No, I'm Done"
                };
                var dialog = await DialogService.ShowAsync<MudMessageBox>("Add Another?", parameters);
                var dialogResult = await dialog.Result;

                await LoadDataAsync();

                if (dialogResult is { Canceled: false, Data: true })
                {
                    ResetFormForAnotherEntry(dateToKeep, weekToKeep);
                }
                else
                {
                    ResetForm();
                }
            }
            else
            {
                schedule.ScheduleId = selectedScheduleId;
                var result = await ScheduleService.UpdateScheduleAsync(schedule);
                if (result != null)
                {
                    Snackbar.Add("Schedule updated successfully!", Severity.Success);
                    await LoadDataAsync();
                    ResetForm();
                }
                else
                {
                    Snackbar.Add("Schedule not found or update failed", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving schedule: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private async Task DeleteScheduleAsync()
    {
        if (selectedScheduleId == 0) return;

        isProcessing = true;
        try
        {
            var success = await ScheduleService.DeleteScheduleAsync(selectedScheduleId);
            if (success)
            {
                Snackbar.Add("Schedule deleted successfully!", Severity.Success);
                await LoadDataAsync();
                ResetForm();
            }
            else
            {
                Snackbar.Add("Failed to delete schedule", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting schedule: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private string ValidateNotes(string notes)
    {
        if (schedule.HomeTeamId > 0 && allTeams != null)
        {
            var homeTeam = allTeams.FirstOrDefault(t => t.TeamId == schedule.HomeTeamId);
            if (homeTeam != null && homeTeam.TeamName.Contains("Park", StringComparison.OrdinalIgnoreCase))
            {
                if (string.IsNullOrWhiteSpace(notes))
                {
                    return "Table # is required when the home team is a 'Park' team.";
                }
            }
        }
        return null!;
    }

    private void ResetForm()
    {
        schedule = new ScheduleViewModel();
        selectedScheduleId = 0;
        StateHasChanged();
    }

    private void ResetFormForAnotherEntry(DateTime? gameDate, int weekNumber)
    {
        schedule = new ScheduleViewModel
        {
            GameDate = gameDate,
            WeekNumber = weekNumber
        };
        selectedScheduleId = 0;
        StateHasChanged();
    }
}