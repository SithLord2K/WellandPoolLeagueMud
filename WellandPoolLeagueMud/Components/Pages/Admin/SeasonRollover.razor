@page "/admin/season-rollover"
@attribute [Authorize(Roles = "Super_User")]
@using Microsoft.EntityFrameworkCore
@using WellandPoolLeagueMud.Components.Dialogs
@using WellandPoolLeagueMud.Data
@using WellandPoolLeagueMud.Components.Shared
@using WellandPoolLeagueMud.Data.Services
@inject IDbContextFactory<WellandPoolLeagueDbContext> DbContextFactory
@inject ISnackbar Snackbar
@inject WellandPoolLeagueMud.Data.Services.DialogService DialogService

<PageTitle>Season Rollover</PageTitle>

<PageContainer Title="League Season Rollover">
    <MudText Color="Color.Info" Class="mb-4">
        This utility will directly execute a script against the database to:
        <MudList T="string">
            <MudListItem Icon="@Icons.Material.Filled.Backup">Back up selected league tables for a new season.</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.CleaningServices">Reset player team assignments by setting their team to NULL.</MudListItem>
            <MudListItem Icon="@Icons.Material.Filled.DeleteForever">Clear and reseed the selected tables (excluding Players).</MudListItem>
        </MudList>
    </MudText>

    @* Step 1: Table Selection *@
    <MudCard Class="mb-6">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Step 1: Select Tables to Back Up & Reset</MudText>
                <MudText Typo="Typo.body2">
                    Choose tables to back up.
                    <strong>Note:</strong> If 'Players' is selected, it will be backed up and team links reset, but player data will <strong>not</strong> be deleted.
                    'UserProfiles' are always excluded.
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            @if (_tables.Any())
            {
                <MudGrid Spacing="2">
                    @for (int i = 0; i < _tables.Count; i++)
                    {
                        var tableIndex = i;
                        <MudItem xs="12" sm="6" md="4" lg="3" @key="_tables[tableIndex].DbName">
                            <MudCheckBox T="bool"
                                         Value="@_tables[tableIndex].IsSelected"
                                         ValueChanged="@((bool newValue) => OnCheckboxChanged(tableIndex, newValue))"
                                         Label="@_tables[tableIndex].DisplayName"
                                         Color="Color.Primary" />
                        </MudItem>
                    }
                </MudGrid>
            }
            else
            {
                <Loading Message="Loading table list..." />
            }
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SelectAll" StartIcon="@Icons.Material.Filled.SelectAll">Select All</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DeselectAll" StartIcon="@Icons.Material.Filled.Deselect">Deselect All</MudButton>
        </MudCardActions>
    </MudCard>

    @* Step 2: Action *@
    <MudCard Class="mb-6">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Step 2: Execute Rollover Script</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudAlert Severity="Severity.Error" Class="mb-4">
                <strong>DANGER:</strong> This action will permanently alter the database.
                Always perform a full manual backup before proceeding. This cannot be undone.
            </MudAlert>
            <MudText Typo="Typo.body2" Class="mb-2">
                Selected tables: @(_tables.Count(t => t.IsSelected)) of @_tables.Count
            </MudText>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="ConfirmAndExecuteScript"
                       Disabled="@(!_tables.Any(t => t.IsSelected) || _isProcessing)"
                       StartIcon="@Icons.Material.Filled.Warning">
                @if (_isProcessing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <span class="ms-2">Processing...</span>
                }
                else
                {
                    <span>Execute Season Rollover</span>
                }
            </MudButton>
        </MudCardContent>
    </MudCard>

    @* Step 3: Result Log *@
    @if (!string.IsNullOrEmpty(_executionLog))
    {
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Step 3: Execution Result</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudAlert Severity="_logSeverity" Variant="Variant.Outlined">@((MarkupString)_executionLog)</MudAlert>
            </MudCardContent>
        </MudCard>
    }
</PageContainer>


@code {
    private List<TableSelection> _tables = new();
    private bool _isProcessing = false;
    private string _executionLog = string.Empty;
    private Severity _logSeverity = Severity.Normal;
    private readonly List<string> _dependencyOrder = new()
    {
        "WPLMud_Bars",
        "WPLMud_Players",
        "WPLMud_Teams",
        "WPLMud_Schedules",
        "WPLMud_PlayerGames"
    };

    public class TableSelection
    {
        public string DbName { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await using var context = await DbContextFactory.CreateDbContextAsync();
        var excludedTables = new HashSet<string> { "WPLMud_UserProfiles" };
        var tempTableList = new List<TableSelection>();

        var allEntityTypes = context.Model.GetEntityTypes();
        foreach (var entityType in allEntityTypes)
        {
            var tableName = entityType.GetTableName();
            if (string.IsNullOrEmpty(tableName) || excludedTables.Contains(tableName))
            {
                continue;
            }

            var newTableSelection = new TableSelection
            {
                DbName = tableName,
                DisplayName = tableName.Replace("WPLMud_", ""),
                IsSelected = false
            };
            tempTableList.Add(newTableSelection);
        }

        _tables = tempTableList.OrderBy(t => t.DisplayName).ToList();
    }

    private void OnCheckboxChanged(int index, bool newValue)
    {
        _tables[index].IsSelected = newValue;
        StateHasChanged();
    }

    private void SelectAll()
    {
        for (int i = 0; i < _tables.Count; i++)
        {
            _tables[i].IsSelected = true;
        }
        StateHasChanged();
    }

    private void DeselectAll()
    {
        for (int i = 0; i < _tables.Count; i++)
        {
            _tables[i].IsSelected = false;
        }
        StateHasChanged();
    }

    private async Task ConfirmAndExecuteScript()
    {
        bool confirmed = await DialogService.ShowConfirmationDialog(
            "Confirm Database Execution",
            "This will permanently alter the database and cannot be undone. Are you sure you want to proceed with the season rollover?",
            "Yes, Execute Now"
        );

        if (confirmed)
        {
            await ExecuteScript();
        }
    }

    private async Task ExecuteScript()
    {
        _isProcessing = true;
        _executionLog = string.Empty;
        StateHasChanged();

        var selectedTables = _tables.Where(t => t.IsSelected).Select(t => t.DbName).ToList();
        if (!selectedTables.Any())
        {
            Snackbar.Add("Please select at least one table.", Severity.Info);
            _isProcessing = false;
            return;
        }

        var seasonYear = DateTime.UtcNow.Year;
        var builder = new System.Text.StringBuilder();
        var logBuilder = new System.Text.StringBuilder();

        builder.AppendLine("BEGIN TRANSACTION;");
        builder.AppendLine("BEGIN TRY");
        logBuilder.AppendLine("Starting season rollover process...");
        foreach (var tableName in selectedTables)
        {
            var backupTableName = $"{tableName}_Season_{seasonYear}";
            builder.AppendLine($"IF OBJECT_ID('[{backupTableName}]', 'U') IS NOT NULL DROP TABLE [{backupTableName}];");
            builder.AppendLine($"SELECT * INTO [{backupTableName}] FROM [{tableName}];");
            logBuilder.AppendLine($"&bull; Backed up <strong>{tableName}</strong> to <strong>{backupTableName}</strong>.");
        }

        if (selectedTables.Contains("WPLMud_Players"))
        {
            builder.AppendLine("UPDATE [WPLMud_Players] SET [TeamId] = NULL;");
            logBuilder.AppendLine("&bull; Reset <strong>TeamId</strong> for all players.");
        }

        var tablesToClear = selectedTables
            .Where(t => t != "WPLMud_Players")
            .OrderByDescending(t => _dependencyOrder.IndexOf(t))
            .ToList();
        if (tablesToClear.Any())
        {
            foreach (var tableName in tablesToClear)
            {
                builder.AppendLine($"DELETE FROM [{tableName}];");
                builder.AppendLine($"DBCC CHECKIDENT ('[{tableName}]', RESEED, 0);");
                logBuilder.AppendLine($"&bull; Cleared and reseeded <strong>{tableName}</strong>.");
            }
        }

        builder.AppendLine("COMMIT TRANSACTION;");
        builder.AppendLine("END TRY");
        builder.AppendLine("BEGIN CATCH");
        builder.AppendLine("    IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION;");
        builder.AppendLine("    THROW;");
        builder.AppendLine("END CATCH;");
        try
        {
            await using var context = await DbContextFactory.CreateDbContextAsync();
            await context.Database.ExecuteSqlRawAsync(builder.ToString());

            _logSeverity = Severity.Success;
            _executionLog = $"<strong>Successfully completed season rollover for {seasonYear} at {DateTime.Now}.</strong><br/>{logBuilder}";
            Snackbar.Add("Database updated successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            _logSeverity = Severity.Error;
            _executionLog = $"<strong>An error occurred during execution:</strong><br/>{ex.Message}<br/><br/>{logBuilder}";
            Snackbar.Add("An error occurred. Check the log for details.", Severity.Error);
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }
}