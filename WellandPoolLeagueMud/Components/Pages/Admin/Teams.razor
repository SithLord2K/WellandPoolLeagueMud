@page "/admin/teams"
@attribute [Authorize(Roles = "League_Admin,Super_User")]
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Data.Services
@using MudBlazor
@inject ISnackbar Snackbar
@inject ITeamService TeamService
@inject IPlayerService PlayerService
@inject IBarService BarService

<PageTitle>Teams Administration</PageTitle>

<MudContainer>
    <MudGrid Justify="Justify.Center" Spacing="4">
        <MudItem xs="12" sm="8" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Add/Edit Team</MudText>
                <MudForm>
                    <MudGrid>
                        @if (isLoading)
                        {
                            <MudItem xs="12" Class="d-flex justify-center py-8">
                                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudSelect T="int?"
                                           Label="Choose Team to Edit"
                                           Value="team.TeamId == 0 ? null : team.TeamId"
                                           ValueChanged="async (id) => await LoadTeamAsync(id)"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int?" Value="null">Create New Team</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var t in allTeams)
                                        {
                                            <MudSelectItem T="int?" Value="t.TeamId">
                                                @t.TeamName @(!string.IsNullOrEmpty(t.BarName) ? $"({t.BarName})" : "")
                                            </MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12">
                                <MudTextField T="string"
                                              Label="Team Name"
                                              @bind-Value="team.TeamName"
                                              Required
                                              Variant="Variant.Filled"
                                              HelperText="Enter the team name" />
                            </MudItem>

                            <MudItem xs="12">
                                <MudSelect T="int?"
                                           Label="Bar/Venue"
                                           @bind-Value="team.BarId"
                                           @bind-Value:after="UpdateSelectedBar"
                                           Variant="Variant.Filled"
                                           Clearable="true"
                                           HelperText="Select the bar where this team plays home games">
                                    <MudSelectItem T="int?" Value="null">No Bar Assigned</MudSelectItem>
                                    @if (availableBars is not null)
                                    {
                                        @foreach (var bar in availableBars)
                                        {
                                            var isAvailable = bar.HasAvailableSlots || team.BarId == bar.BarId;
                                            <MudSelectItem T="int?"
                                                           Value="bar.BarId"
                                                           Disabled="!isAvailable">
                                                @bar.BarName
                                                @if (!isAvailable)
                                                {
                                                    <text> (Full - @bar.CurrentTeamCount/@bar.MaxTeams)</text>
                                                }
                                                else if (bar.AvailableSlots < bar.MaxTeams)
                                                {
                                                    <text> (@bar.AvailableSlots slots available)</text>
                                                }
                                            </MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            @if (team.BarId.HasValue && selectedBar is not null)
                            {
                                <MudItem xs="12">
                                    <MudAlert Severity="Severity.Info" Dense="true">
                                        <strong>@selectedBar.BarName</strong> has @selectedBar.NumberOfTables tables
                                        and can accommodate up to @selectedBar.MaxTeams teams
                                        (@selectedBar.AvailableSlots slots remaining).
                                    </MudAlert>
                                </MudItem>
                            }

                            <MudItem xs="12">
                                <MudSelect T="int?"
                                           Label="Team Captain"
                                           @bind-Value="team.CaptainPlayerId"
                                           Variant="Variant.Filled"
                                           Clearable="true"
                                           HelperText="Select a team captain (optional)">
                                    <MudSelectItem T="int?" Value="null">No Captain Selected</MudSelectItem>
                                    @if (allPlayers is not null)
                                    {
                                        @foreach (var p in allPlayers)
                                        {
                                            <MudSelectItem T="int?" Value="p.PlayerId">@p.FullName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            @if (team.TeamId > 0)
                            {
                                <MudItem xs="12">
                                    <MudCard>
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" Class="mb-3">Team Statistics</MudText>
                                            <MudGrid>
                                                <MudItem xs="6" sm="3">
                                                    <MudText Typo="Typo.subtitle2">Games Played:</MudText>
                                                    <MudText Typo="Typo.body1">@team.GamesPlayed</MudText>
                                                </MudItem>
                                                <MudItem xs="6" sm="3">
                                                    <MudText Typo="Typo.subtitle2">Wins:</MudText>
                                                    <MudText Typo="Typo.body1">@team.GamesWon</MudText>
                                                </MudItem>
                                                <MudItem xs="6" sm="3">
                                                    <MudText Typo="Typo.subtitle2">Losses:</MudText>
                                                    <MudText Typo="Typo.body1">@team.GamesLost</MudText>
                                                </MudItem>
                                                <MudItem xs="6" sm="3">
                                                    <MudText Typo="Typo.subtitle2">Win %:</MudText>
                                                    <MudText Typo="Typo.body1">@team.WinPercentage.ToString("F1")%</MudText>
                                                </MudItem>
                                            </MudGrid>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            }

                            <MudItem xs="12" Class="d-flex justify-start gap-4 mt-4">
                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Tertiary"
                                           OnClick="SaveTeamAsync"
                                           StartIcon="@Icons.Material.Filled.Save">
                                    @(team.TeamId == 0 ? "Create Team" : "Update Team")
                                </MudButton>

                                <MudButton Variant="Variant.Filled"
                                           Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Refresh"
                                           OnClick="ResetForm">
                                    Reset
                                </MudButton>

                                @if (team.TeamId > 0)
                                {
                                    <AuthorizeView Roles="Super_User">
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Warning"
                                                   StartIcon="@Icons.Material.Filled.Delete"
                                                   OnClick="DeleteTeamAsync">
                                            Delete Team
                                        </MudButton>
                                    </AuthorizeView>
                                }
                            </MudItem>
                        }
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private TeamViewModel team = new();
    private List<TeamViewModel>? allTeams;
    private List<PlayerViewModel>? allPlayers;
    private List<BarViewModel>? availableBars;
    private BarViewModel? selectedBar;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            allTeams = await TeamService.GetAllTeamsAsync();
            allPlayers = await PlayerService.GetAllPlayersAsync();
            availableBars = await BarService.GetActiveBarsAsync();
            await UpdateSelectedBar();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateSelectedBar()
    {
        if (team.BarId.HasValue && availableBars is not null)
        {
            selectedBar = availableBars.FirstOrDefault(b => b.BarId == team.BarId.Value);
            if (selectedBar is null)
            {
                selectedBar = await BarService.GetBarByIdAsync(team.BarId.Value);
            }
        }
        else
        {
            selectedBar = null;
        }
        StateHasChanged();
    }

    private async Task LoadTeamAsync(int? teamId)
    {
        if (teamId.HasValue && teamId > 0)
        {
            try
            {
                var selectedTeam = await TeamService.GetTeamByIdAsync(teamId.Value);
                if (selectedTeam != null)
                {
                    team = selectedTeam;
                    await UpdateSelectedBar();
                }
                else
                {
                    Snackbar.Add("Team not found", Severity.Warning);
                    ResetForm();
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading team: {ex.Message}", Severity.Error);
                ResetForm();
            }
        }
        else
        {
            ResetForm();
        }
    }

    private async Task SaveTeamAsync()
    {
        if (string.IsNullOrWhiteSpace(team.TeamName))
        {
            Snackbar.Add("Team name is required", Severity.Warning);
            return;
        }

        if (team.BarId.HasValue)
        {
            var targetBar = availableBars?.FirstOrDefault(b => b.BarId == team.BarId.Value);
            if (targetBar is not null && !targetBar.HasAvailableSlots && team.BarId != team.BarId)
            {
                Snackbar.Add($"Selected bar '{targetBar.BarName}' is full and cannot accept more teams.", Severity.Warning);
                return;
            }
        }

        try
        {
            var isNewTeam = team.TeamId == 0;
            TeamViewModel? result;

            if (isNewTeam)
            {
                result = await TeamService.CreateTeamAsync(team);
            }
            else
            {
                result = await TeamService.UpdateTeamAsync(team);
            }

            if (result != null)
            {
                var message = isNewTeam ? "Team created successfully!" : "Team updated successfully!";
                Snackbar.Add(message, Severity.Success);
                await LoadDataAsync();
                team = result;
                await UpdateSelectedBar();
            }
            else
            {
                Snackbar.Add("Failed to save team. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving team: {ex.Message}", Severity.Error);
        }
    }

    private async Task DeleteTeamAsync()
    {
        if (team.TeamId == 0) return;

        try
        {
            var success = await TeamService.DeleteTeamAsync(team.TeamId);

            if (success)
            {
                Snackbar.Add("Team deleted successfully!", Severity.Success);
                await LoadDataAsync();
                ResetForm();
            }
            else
            {
                Snackbar.Add("Failed to delete team. It may be referenced by other records.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting team: {ex.Message}", Severity.Error);
        }
    }

    private void ResetForm()
    {
        team = new TeamViewModel();
        selectedBar = null;
    }
}