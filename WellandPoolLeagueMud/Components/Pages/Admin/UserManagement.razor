@page "/admin/user-management"
@attribute [Authorize(Roles = "Super_User")]

@using WellandPoolLeagueMud.Dialogs
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Auth0.ManagementApi.Models

@inject IAuth0ManagementService Auth0ManagementService
@inject IPlayerUserService PlayerUserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ILogger<UserManagement> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>User Management</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">User Management</MudText>
<MudText Class="mb-4">Create, delete, block, assign roles to users, and link to player profiles. Changes are saved to Auth0 immediately.</MudText>

@if (_isLoading)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    <MudText Class="mt-2">Loading users, roles, and player data...</MudText>
}
else if (_hasError)
{
    <MudAlert Severity="Severity.Error" Class="mb-4">
        <strong>Error Loading Data:</strong> @_errorMessage
        <MudButton Color="Color.Primary" Variant="Variant.Text" Size="Size.Small" OnClick="RefreshData" Class="ml-2">
            Retry
        </MudButton>
    </MudAlert>
}
else if (_users is not null && _allRoles is not null)
{
    <MudPaper Class="pa-4" Elevation="3">
        <div class="d-flex justify-space-between align-center mb-4">
            <MudText Typo="Typo.h6">Users (@_users.Count)</MudText>
            <div>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="OpenAddUserDialog" StartIcon="@Icons.Material.Filled.Add" Class="mr-2">
                    Add User
                </MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Outlined" OnClick="RefreshData" StartIcon="@Icons.Material.Filled.Refresh">
                    Refresh
                </MudButton>
            </div>
        </div>

        <MudTable Items="@_users" Hover="true" Bordered="true" Striped="true" T="UserViewModel" Dense="true">
            <HeaderContent>
                <MudTh>User</MudTh>
                <MudTh>Linked Player</MudTh>
                <MudTh>Assigned Roles</MudTh>
                <MudTh Style="width: 300px;">Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="User">
                    <div class="d-flex align-center">
                        <div>
                            <MudText>@context.Email</MudText>
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                ID: @context.UserId
                            </MudText>
                        </div>
                        @if (IsCurrentUser(context))
                        {
                            <MudChip T="string" Color="Color.Primary" Size="Size.Small" Class="ml-2" Icon="@Icons.Material.Filled.Person">You</MudChip>
                        }
                        @if (context.IsBlocked)
                        {
                            <MudChip T="string" Color="Color.Error" Size="Size.Small" Class="ml-2" Icon="@Icons.Material.Filled.Block">Blocked</MudChip>
                        }
                    </div>
                </MudTd>
                <MudTd DataLabel="Linked Player">
                    @{
                        var linkedPlayer = GetLinkedPlayer(context.UserId);
                    }
                    @if (linkedPlayer != null)
                    {
                        <div class="d-flex align-center">
                            <div>
                                <MudText>@linkedPlayer.FirstName @linkedPlayer.LastName</MudText>
                                @if (linkedPlayer.Team != null)
                                {
                                    <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                        Team: @linkedPlayer.Team.TeamName
                                    </MudText>
                                }
                            </div>
                            <MudIconButton Icon="@Icons.Material.Filled.LinkOff"
                                           Size="Size.Small"
                                           Color="Color.Warning"
                                           OnClick="@(() => UnlinkPlayer(context))"
                                           Class="ml-2">Unlink Player</MudIconButton>
                        </div>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   StartIcon="@Icons.Material.Filled.Link"
                                   OnClick="@(() => OpenLinkPlayerDialog(context))">
                            Link Player
                        </MudButton>
                    }
                </MudTd>
                <MudTd DataLabel="Roles">
                    <MudSelect T="string"
                               Label="Roles"
                               MultiSelection="true"
                               @bind-SelectedValues="context.Roles"
                               Variant="Variant.Outlined"
                               Dense="true"
                               ToStringFunc="GetRoleName"
                               Disabled="_isSaving || IsCurrentUser(context)">
                        @foreach (var role in _allRoles)
                        {
                            <MudSelectItem T="string" Value="@role.Id">@role.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <div class="d-flex">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Small"
                                   OnClick="@(() => SaveUserRoles(context))"
                                   Disabled="@(_isSaving || IsCurrentUser(context))"
                                   StartIcon="@(_isSaving && _currentSavingUserId == context.UserId ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Save)">
                            @if (_isSaving && _currentSavingUserId == context.UserId)
                            {
                                <text>Saving...</text>
                            }
                            else
                            {
                                <text>Save Roles</text>
                            }
                        </MudButton>
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Dense="true" Class="ml-2">
                            <MudMenuItem OnClick="@(() => BlockUnblockUser(context, !context.IsBlocked))">
                                @(context.IsBlocked ? "Unblock" : "Block")
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(() => DeleteUser(context))" Disabled="IsCurrentUser(context)">Delete</MudMenuItem>
                        </MudMenu>
                    </div>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudPaper>
}

@code {
    private List<UserViewModel>? _users;
    private List<RoleViewModel>? _allRoles;
    private Dictionary<string, Player> _userPlayerLinks = new();
    private List<Player> _unlinkedPlayers = new();
    private int _linkedPlayersCount = 0;
    private int _unlinkedPlayersCount = 0;
    private bool _isLoading = true;
    private bool _hasError = false;
    private string _errorMessage = string.Empty;
    private bool _isSaving = false;
    private string _currentSavingUserId = string.Empty;
    private string? _currentAuth0UserId;

    protected override async Task OnInitializedAsync()
    {
        await GetCurrentUserId();
        await LoadData();
    }

    private async Task GetCurrentUserId()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentAuth0UserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
    }

    private async Task LoadData()
    {
        _isLoading = true;
        _hasError = false;
        try
        {
            var usersTask = Auth0ManagementService.GetUsersAsync();
            var rolesTask = Auth0ManagementService.GetRolesAsync();
            var unlinkedPlayersTask = PlayerUserService.GetUnlinkedPlayersAsync();
            var playerLinksTask = PlayerUserService.GetAllPlayerLinksAsync();

            await Task.WhenAll(usersTask, rolesTask, unlinkedPlayersTask, playerLinksTask);

            _users = (await usersTask)?.ToList();
            _allRoles = (await rolesTask)?.ToList();
            _unlinkedPlayers = await unlinkedPlayersTask;
            _userPlayerLinks = await playerLinksTask;

            if (_users == null || _allRoles == null)
            {
                throw new InvalidOperationException("Failed to load users or roles.");
            }

            _unlinkedPlayersCount = _unlinkedPlayers.Count;
            _linkedPlayersCount = _userPlayerLinks.Count;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading user management data");
            _hasError = true;
            _errorMessage = ex.Message;
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private Player? GetLinkedPlayer(string? userId)
    {
        if (string.IsNullOrEmpty(userId)) return null;
        return _userPlayerLinks.TryGetValue(userId, out var player) ? player : null;
    }

    private async Task RefreshData() => await LoadData();

    private async Task OpenLinkPlayerDialog(UserViewModel user)
    {
        var parameters = new DialogParameters<LinkPlayerDialog>
        {
            { x => x.UserEmail, user.Email! },
            { x => x.Auth0UserId, user.UserId! },
            { x => x.UnlinkedPlayers, _unlinkedPlayers }
        };

        var dialog = await DialogService.ShowAsync<LinkPlayerDialog>("Link Player to User", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: true })
        {
            await RefreshData();
            Snackbar.Add($"Player linked to {user.Email} successfully.", Severity.Success);
        }
    }

    private async Task UnlinkPlayer(UserViewModel user)
    {
        var parameters = new DialogParameters
        {
            ["Message"] = $"Are you sure you want to unlink the player from '{user.Email}'?",
            ["YesText"] = "Unlink",
            ["NoText"] = "Cancel",
            ["Color"] = Color.Warning
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Confirm Unlink", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: true })
        {
            try
            {
                var success = await PlayerUserService.UnlinkUserFromPlayerAsync(user.UserId!);
                if (success)
                {
                    await RefreshData();
                    Snackbar.Add($"Player unlinked from {user.Email} successfully.", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to unlink player.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to unlink player for user {UserId}", user.UserId);
                Snackbar.Add($"Error unlinking player: {ex.Message}", Severity.Error);
            }
        }
    }

    // --- FIX 1: ADDING THIS MISSING METHOD ---
    private async Task DeleteUser(UserViewModel user)
    {
        // --- FIX 2: USING CORRECT PARAMETERS FOR MESSAGE BOX ---
        var parameters = new DialogParameters
        {
            ["Message"] = $"Are you sure you want to delete the user '{user.Email}'? This action cannot be undone.",
            ["YesText"] = "Delete",
            ["NoText"] = "Cancel",
            ["Color"] = Color.Error
        };

        var dialog = await DialogService.ShowAsync<MudMessageBox>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false, Data: true })
        {
            try
            {
                await Auth0ManagementService.DeleteUserAsync(user.UserId!);
                _users?.Remove(user);
                Snackbar.Add($"User {user.Email} deleted successfully.", Severity.Success);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to delete user {UserId}", user.UserId);
                Snackbar.Add($"Error deleting user: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task BlockUnblockUser(UserViewModel user, bool block)
    {
        var action = block ? "block" : "unblock";
        try
        {
            await Auth0ManagementService.UpdateUserBlockAsync(user.UserId!, block);
            user.IsBlocked = block;
            Snackbar.Add($"User {user.Email} has been {action}ed.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to {Action} user {UserId}", action, user.UserId);
            Snackbar.Add($"Error {action}ing user: {ex.Message}", Severity.Error);
        }
    }

    private async Task SaveUserRoles(UserViewModel user)
    {
        _isSaving = true;
        _currentSavingUserId = user.UserId!;
        try
        {
            await Auth0ManagementService.AssignRolesToUserAsync(user.UserId!, user.Roles.ToList());
            Snackbar.Add($"Roles for {user.Email} updated.", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving roles for user {UserId}", user.UserId);
            Snackbar.Add($"Error saving roles: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isSaving = false;
            _currentSavingUserId = string.Empty;
        }
    }

    private async Task OpenAddUserDialog()
    {
        var parameters = new DialogParameters<AddUserDialog>
        {
            { x => x.AllRoles, _allRoles }
        };
        var dialog = await DialogService.ShowAsync<AddUserDialog>("Create New User", parameters);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            await RefreshData();
        }
    }

    private string GetRoleName(string roleId) => _allRoles?.FirstOrDefault(r => r.Id == roleId)?.Name ?? "Unknown";

    private bool IsCurrentUser(UserViewModel user) => string.Equals(user.UserId, _currentAuth0UserId, StringComparison.OrdinalIgnoreCase);
}