@* @page "/admin/weeks"
@attribute [Authorize(Roles = "League_Admin, Super_User")]
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.Models
@using MudBlazor
@inject ISnackbar Snackbar
@inject IDataFactory DataFactory

<PageTitle>Weeks Administration</PageTitle>

<MudContainer>
    <MudGrid Justify="Justify.Center" Spacing="4">
        <MudItem xs="12" sm="8" md="6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h5" Class="mb-4">Add/Edit Week</MudText>
                <MudText Typo="Typo.body2" Color="Color.Warning" Class="mb-4">Weeks can currently ONLY be added and not modified. If data is not correct, please contact the site admin to correct it.</MudText>
                <MudForm>
                    <MudGrid>
                        @if (isLoading)
                        {
                            <MudItem xs="12" Class="d-flex justify-center py-8">
                                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12">
                                <MudSelect T="int"
                                           Label="Select Schedule to Edit"
                                           Value="schedule.ScheduleId"
                                           ValueChanged="OnScheduleSelected"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int">Create New Schedule</MudSelectItem>
                                    @if (allSchedules is not null && allTeams is not null)
                                    {
                                        @foreach (var s in allSchedules)
                                        {
                                            var homeTeamName = allTeams.FirstOrDefault(x => x.TeamId == s.HomeTeamId)?.TeamName ?? "N/A";
                                            var awayTeamName = allTeams.FirstOrDefault(x => x.TeamId == s.AwayTeamId)?.TeamName ?? "N/A";
                                            <MudSelectItem T="int" Value="@s.ScheduleId">
                                                Week @s.WeekNumber, Date: @s.Date.ToShortDateString(), Home: @homeTeamName, Away: @awayTeamName
                                            </MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudSelect T="int"
                                           Label="Home Team"
                                           @bind-Value="schedule.HomeTeamId"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int" Value="0">Select a Home Team</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var t1 in allTeams)
                                        {
                                            <MudSelectItem T="int" Value="t1.TeamId">@t1.TeamName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudSelect T="int"
                                           Label="Away Team"
                                           @bind-Value="schedule.AwayTeamId"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int" Value="0">Select an Away Team</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var t2 in allTeams)
                                        {
                                            <MudSelectItem T="int" Value="t2.TeamId">@t2.TeamName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12">
                                <MudSelect T="int?"
                                           Label="Winning Team"
                                           @bind-Value="schedule.WinningTeamId"
                                           Variant="Variant.Filled">
                                    <MudSelectItem T="int?" Value="0">Select a Winning Team</MudSelectItem>
                                    @if (allTeams is not null)
                                    {
                                        @foreach (var t3 in allTeams)
                                        {
                                            <MudSelectItem T="int?" Value="t3.TeamId">@t3.TeamName</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudCheckBox T="bool"
                                             Label="Forfeit"
                                             @bind-Checked="schedule.Forfeit"
                                             Color="Color.Primary" />
                            </MudItem>

                            <MudItem xs="12" sm="6">
                                <MudCheckBox T="bool"
                                             Label="Playoff"
                                             @bind-Checked="schedule.Playoffs"
                                             Color="Color.Primary" />
                            </MudItem>

                            <MudItem xs="12" Class="d-flex justify-start gap-4 mt-4">
                                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveWeekAsync">Save Week</MudButton>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ResetForm">Reset</MudButton>
                            </MudItem>
                        }
                    </MudGrid>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private Schedule schedule = new();
    private List<WPL_Team>? allTeams;
    private List<Schedule>? allSchedules;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            isLoading = true;
            allTeams = await DataFactory.GetTeamsAsync();
            allSchedules = await DataFactory.GetSchedulesAsync();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ResetForm()
    {
        schedule = new Schedule();
    }

    private void OnScheduleSelected(int scheduleId)
    {
        if (scheduleId > 0 && allSchedules != null)
        {
            schedule = allSchedules.FirstOrDefault(s => s.ScheduleId == scheduleId) ?? new Schedule();
        }
        else
        {
            ResetForm();
        }
    }

    private async Task SaveWeekAsync()
    {
        if (schedule.HomeTeamId == schedule.AwayTeamId)
        {
            Snackbar.Add("Home and Away teams cannot be the same.", Severity.Error);
            return;
        }

        var isNewWeek = schedule.ScheduleId == 0;
        var success = await DataFactory.AddOrUpdateScheduleAsync(schedule);

        if (success)
        {
            var message = isNewWeek ? "Week added successfully!" : "Week updated successfully!";
            Snackbar.Add(message, Severity.Success);
            ResetForm();
            await LoadDataAsync();
        }
        else
        {
            Snackbar.Add("Failed to save week. Please try again.", Severity.Error);
        }
    }
} *@