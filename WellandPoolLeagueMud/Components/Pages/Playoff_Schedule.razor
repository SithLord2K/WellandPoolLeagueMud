@page "/playoff_schedule"
@attribute [StreamRendering]
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Components.Buttons
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IScheduleService ScheduleService
@inject ISnackbar Snackbar

<PageTitle>Playoff Schedule</PageTitle>

<MudContainer>
    <div class="d-flex align-center gap-4 mb-4">
        <MudDatePicker @ref="@datePicker"
                       Label="Select date to jump to that week:"
                       ShowToolbar="false"
                       IsDateDisabledFunc="@((DateTime dt)=>((int)dt.DayOfWeek != 2))"
                       PickerVariant="PickerVariant.Dialog"
                       DateChanged="@(e => SelectedDate(e))"
                       Date="selectedDate"
                       DateFormat="MM-dd-yyyy" />

        <MudButton Variant="Variant.Text"
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Refresh"
                   OnClick="@(() => LoadPlayoffSchedule())"
                   Disabled="isLoading">
            Refresh
        </MudButton>
    </div>

    @if (isLoading)
    {
        <MudContainer Class="d-flex justify-center align-center" Style="height: 400px;">
            <div class="d-flex flex-column align-center">
                <MudProgressCircular Indeterminate="true" Size="Size.Large" />
                <MudText Typo="Typo.body2" Class="mt-4 mud-text-secondary">Loading playoff schedule...</MudText>
            </div>
        </MudContainer>
    }
    else if (playoffSchedulesByWeek is not null && playoffSchedulesByWeek.Any())
    {
        @foreach (var weekGroup in playoffSchedulesByWeek.OrderBy(w => w.Key))
        {
            var weekNumber = weekGroup.Key;
            var weekGames = weekGroup.OrderBy(s => s.GameDate).ToList();
            var firstGameDate = weekGames.First().GameDate;

            <div id="@firstGameDate.ToString("MM-dd-yyyy")">
                <MudCard Class="mb-4" Elevation="3">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <div class="d-flex align-center justify-space-between">
                                <div class="d-flex align-center gap-2">
                                    <MudText Typo="Typo.h5">@firstGameDate.ToLongDateString()</MudText>
                                    <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Filled">
                                        Playoffs
                                    </MudChip>
                                </div>
                                <MudChip T="string" Color="Color.Primary" Size="Size.Medium" Variant="Variant.Filled">
                                    Week @weekNumber
                                </MudChip>
                            </div>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent Class="px-0">
                        <MudTable Items="@weekGames"
                                  Dense="true"
                                  Hover="true"
                                  Bordered="true"
                                  Striped="true"
                                  T="ScheduleViewModel">
                            <HeaderContent>
                                <MudTh Style="width: 80px; text-align: center;">Result</MudTh>
                                <MudTh>Home Team</MudTh>
                                <MudTh Style="width: 50px; text-align: center;">vs</MudTh>
                                <MudTh>Away Team</MudTh>
                                <MudTh Style="width: 80px; text-align: center;">Result</MudTh>
                                <MudTh Style="width: 100px; text-align: center;">Status</MudTh>
                                @if (!string.IsNullOrEmpty(weekGames.FirstOrDefault()?.Notes))
                                {
                                    <MudTh Style="width: 150px;">Table #</MudTh>
                                }
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Home Result" Style="text-align: center;">
                                    @if (context.IsComplete && context.WinningTeamId == context.HomeTeamId)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                    }
                                    else if (context.IsComplete)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                    }
                                </MudTd>
                                <MudTd DataLabel="Home Team">
                                    <div class="d-flex align-center">
                                        @if (context.IsComplete && context.WinningTeamId == context.HomeTeamId)
                                        {
                                            <MudText Typo="Typo.body1" Style="font-weight: bold; color: var(--mud-palette-success);">@context.HomeTeamName</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body1">@context.HomeTeamName</MudText>
                                        }
                                    </div>
                                </MudTd>
                                <MudTd DataLabel="vs" Style="text-align: center; vertical-align: middle;">
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary">vs</MudText>
                                </MudTd>
                                <MudTd DataLabel="Away Team">
                                    <div class="d-flex align-center">
                                        @if (context.IsComplete && context.WinningTeamId == context.AwayTeamId)
                                        {
                                            <MudText Typo="Typo.body1" Style="font-weight: bold; color: var(--mud-palette-success);">@context.AwayTeamName</MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body1">@context.AwayTeamName</MudText>
                                        }
                                    </div>
                                </MudTd>
                                <MudTd DataLabel="Away Result" Style="text-align: center;">
                                    @if (context.IsComplete && context.WinningTeamId == context.AwayTeamId)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                    }
                                    else if (context.IsComplete)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                    }
                                </MudTd>
                                <MudTd DataLabel="Status" Style="text-align: center;">
                                    @if (context.IsComplete)
                                    {
                                        <MudChip T="string" Color="Color.Success" Size="Size.Small" Variant="Variant.Filled">
                                            Complete
                                        </MudChip>
                                    }
                                    else if (context.GameDate.Date < DateTime.Today)
                                    {
                                        <MudChip T="string" Color="Color.Warning" Size="Size.Small" Variant="Variant.Filled">
                                            Pending
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <MudChip T="string" Color="Color.Info" Size="Size.Small" Variant="Variant.Filled">
                                            Scheduled
                                        </MudChip>
                                    }
                                </MudTd>
                                @if (!string.IsNullOrEmpty(weekGames.FirstOrDefault()?.Notes))
                                {
                                    <MudTd DataLabel="Notes">
                                        @if (!string.IsNullOrEmpty(context.Notes))
                                        {
                                            <MudTooltip Text="@context.Notes">
                                                <MudIcon Icon="@Icons.Material.Filled.StickyNote2" Size="Size.Small" Color="Color.Info" />
                                            </MudTooltip>
                                        }
                                    </MudTd>
                                }
                            </RowTemplate>
                            <NoRecordsContent>
                                <div class="d-flex flex-column align-center pa-4">
                                    <MudIcon Icon="@Icons.Material.Filled.EventBusy" Style="font-size: 2rem; color: var(--mud-palette-text-secondary);" />
                                    <MudText Typo="Typo.body2" Class="mud-text-secondary mt-2">No playoff games scheduled for this week</MudText>
                                </div>
                            </NoRecordsContent>
                        </MudTable>
                    </MudCardContent>
                    <MudCardActions Class="d-flex justify-space-between px-4">
                        <MudText Typo="Typo.caption" Class="mud-text-secondary">
                            @weekGames.Count playoff game@(weekGames.Count == 1 ? "" : "s") scheduled
                        </MudText>
                        <div class="d-flex align-center gap-2">
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                @weekGames.Count(g => g.IsComplete) completed, @weekGames.Count(g => !g.IsComplete) pending
                            </MudText>
                            @if (weekGames.Any(g => g.IsComplete))
                            {
                                var completionPercentage = (weekGames.Count(g => g.IsComplete) * 100) / weekGames.Count;
                                <MudProgressLinear Color="Color.Success"
                                                   Size="Size.Small"
                                                   Value="completionPercentage"
                                                   Style="width: 100px;" />
                            }
                        </div>
                    </MudCardActions>
                </MudCard>
            </div>
        }
    }
    else if (playoffSchedulesByWeek is not null && !playoffSchedulesByWeek.Any())
    {
        <MudCard Class="pa-6">
            <div class="d-flex flex-column align-center">
                <MudIcon Icon="@Icons.Material.Filled.EmojiEvents" Style="font-size: 4rem; color: var(--mud-palette-text-secondary);" />
                <MudText Typo="Typo.h6" Class="mt-2">No Playoff Schedule Available</MudText>
                <MudText Typo="Typo.body2" Class="mud-text-secondary text-center">
                    The playoff schedule hasn't been created yet, or the regular season is still in progress.
                </MudText>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Refresh"
                           OnClick="LoadPlayoffSchedule"
                           Class="mt-4">
                    Refresh Schedule
                </MudButton>
            </div>
        </MudCard>
    }

    <ScrollToTopButton />
</MudContainer>

@code {
    private MudDatePicker datePicker = new();
    private DateTime? selectedDate = DateTime.Today;
    private bool isLoading = true;

    private List<ScheduleViewModel>? allSchedules;
    private IEnumerable<IGrouping<int, ScheduleViewModel>>? playoffSchedulesByWeek;

    // Configuration: Determine playoff weeks (you may want to make this configurable)
    private readonly HashSet<int> playoffWeekNumbers = new() { 15, 16, 17, 18, 19, 20 }; // Example playoff weeks

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayoffSchedule();
    }

    private async Task LoadPlayoffSchedule()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            allSchedules = await ScheduleService.GetAllSchedulesAsync();

            if (allSchedules != null && allSchedules.Any())
            {
                // Filter to only playoff games
                // Note: You may need to adjust this logic based on how you determine playoff games
                // This example assumes playoff games are in specific week numbers
                var playoffGames = allSchedules.Where(IsPlayoffGame).ToList();

                playoffSchedulesByWeek = playoffGames
                    .OrderBy(s => s.WeekNumber)
                    .ThenBy(s => s.GameDate)
                    .GroupBy(s => s.WeekNumber);
            }
            else
            {
                playoffSchedulesByWeek = Enumerable.Empty<IGrouping<int, ScheduleViewModel>>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading playoff schedule: {ex.Message}", Severity.Error);
            playoffSchedulesByWeek = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsPlayoffGame(ScheduleViewModel schedule)
    {

        var playoffStartDate = new DateTime(DateTime.Now.AddYears(1).Year, 4, 1); // Example: April 1st of next year
        if (schedule.GameDate >= playoffStartDate)
            return true;

        return false;
    }

    private void SelectedDate(DateTime? selectedDate)
    {
        if (selectedDate.HasValue)
        {
            try
            {
                string uri = NavigationManager.Uri.ToString();
                var dateString = selectedDate.Value.ToString("MM-dd-yyyy");
                if (dateString is not null)
                {
                    if (uri.Contains('#'))
                    {
                        uri = uri.Substring(0, uri.IndexOf('#'));
                    }
                    NavigationManager.NavigateTo($"{uri}#{dateString}", replace: true);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error navigating to date: {ex.Message}", Severity.Error);
            }
        }
    }
}