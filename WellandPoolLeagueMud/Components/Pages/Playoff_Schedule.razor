@page "/playoff_schedule"
@attribute [StreamRendering]
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Components.Buttons
@using MudBlazor

<PageTitle>Playoff Schedule</PageTitle>

<div class="d-flex align-center gap-4">
    <MudDatePicker @ref="@datePicker"
                   Label="Select date to jump to that week:"
                   ShowToolbar="false"
                   IsDateDisabledFunc="@((DateTime dt)=>((int)dt.DayOfWeek != 2))"
                   PickerVariant="PickerVariant.Dialog"
                   DateChanged="@(e => SelectedDate(e))"
                   Date="selectedDate"
                   DateFormat="MM-dd-yyyy" />
</div>
<br />

@if (playoffWeeks is not null && playoffWeeks.Any())
{
    @foreach (var week in playoffWeeks.DistinctBy(x => x.WeekNumber))
    {
        <div id="@week.Date.ToString("MM-dd-yyyy")">
            <MudCard Class="mb-4">
                <MudCardHeader>
                    <MudText Typo="Typo.h5" Align="Align.Center" Class="m-auto">@week.Date.ToLongDateString()</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-4">Week: @week.WeekNumber</MudText>
                    <MudTable Items="@playoffWeeks.Where(x => x.WeekNumber == week.WeekNumber).ToList()"
                              Dense="true"
                              Hover="true"
                              Bordered="true"
                              Striped="true">
                        <HeaderContent>
                            <MudTh Style="width: 50px;">Win</MudTh>
                            <MudTh>Home Team</MudTh>
                            <MudTh></MudTh>
                            <MudTh>Away Team</MudTh>
                            <MudTh Style="width: 50px;">Win</MudTh>
                            <MudTh>Table Number</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Win">
                                <MudCheckBox T="bool"
                                             Value="@(context.WinningTeamId == context.HomeTeamId)"
                                             Color="Color.Success"
                                             UnCheckedColor="Color.Default"
                                             ReadOnly />
                            </MudTd>
                            <MudTd DataLabel="Home Team">@context.HomeTeamName</MudTd>
                            <MudTd DataLabel="" Style="text-align: center; vertical-align: middle;">vs</MudTd>
                            <MudTd DataLabel="Away Team">@context.AwayTeamName</MudTd>
                            <MudTd DataLabel="Win">
                                <MudCheckBox T="bool"
                                             Value="@(context.WinningTeamId == context.AwayTeamId)"
                                             Color="Color.Success"
                                             UnCheckedColor="Color.Default"
                                             ReadOnly />
                            </MudTd>
                            <MudTd DataLabel="Table Number" Style="text-align: center;">@context.TableNumber</MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <div class="box">
                                No games scheduled for this week.
                            </div>
                        </NoRecordsContent>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </div>
    }
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="m-4" />
}

<ScrollToTopButton />

@code {
    [Inject] private WeekHelper weekHelper { get; set; } = default!;

    // This is the correct way to inject navigationManager
    [Inject] private NavigationManager navigationManager { get; set; } = default!;

    private MudDatePicker datePicker = new();
    private DateTime? selectedDate = DateTime.Today;

    private List<WeekViewModel>? playoffWeeks;

    protected override async Task OnInitializedAsync()
    {
        var allWeeks = await weekHelper.GetWeeksFullInfoAsync();
        playoffWeeks = allWeeks.Where(w => w.IsPlayoff).ToList();
    }

    private void SelectedDate(DateTime? selectedDate)
    {
        string uri = navigationManager.Uri.ToString();
        var dateString = selectedDate?.ToString("MM-dd-yyyy");
        if (dateString is not null)
        {
            var fragment = dateString.Replace("/", "-");
            if (uri.Contains('#'))
            {
                uri = uri.Substring(0, uri.IndexOf('#'));
            }
            navigationManager.NavigateTo($"{uri}#{fragment}", replace: true);
        }
    }
}