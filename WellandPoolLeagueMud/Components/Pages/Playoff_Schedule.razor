@page "/playoff_schedule"
@attribute [StreamRendering]
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Components.Buttons
@using MudBlazor
@using WellandPoolLeagueMud.Components.Shared
@inject NavigationManager NavigationManager
@inject IScheduleService ScheduleService
@inject ISnackbar Snackbar

<PageTitle>Playoff Schedule</PageTitle>

<PageContainer Title="Playoff Schedule">
    <div class="d-flex align-center gap-4 mb-4">
        <MudDatePicker @ref="@datePicker"
                       Label="Select date to jump to that week:"
                       ShowToolbar="false"
                       IsDateDisabledFunc="@((DateTime dt)=>((int)dt.DayOfWeek != 2))"
                       PickerVariant="PickerVariant.Dialog"
                       Variant="Variant.Filled"
                       DateChanged="@(e => SelectedDate(e))"
                       Date="selectedDate"
                       DateFormat="MM-dd-yyyy" />

        <MudButton Variant="Variant.Filled"
                   Color="Color.Secondary"
                   StartIcon="@Icons.Material.Filled.Refresh"
                   OnClick="@(() => LoadPlayoffSchedule())"
                   Disabled="isLoading">
            Refresh
        </MudButton>
    </div>

    @if (isLoading)
    {
        <Loading Message="Loading playoff schedule..." />
    }
    else if (playoffSchedulesByWeek is not null && playoffSchedulesByWeek.Any())
    {
        @foreach (var weekGroup in playoffSchedulesByWeek.OrderBy(w => w.Key))
        {
            var weekNumber = weekGroup.Key;
            var weekGames = weekGroup.Where(s => s.GameDate.HasValue).OrderBy(s => s.GameDate).ToList();
            var firstGameDate = weekGames.FirstOrDefault()?.GameDate;
            @if (firstGameDate.HasValue)
            {
                <div id="@firstGameDate.Value.ToString("MM-dd-yyyy")">
                    <MudCard Class="mb-4" Elevation="3">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <div class="d-flex align-center justify-space-between">
                                    <div class="d-flex align-center gap-2">
                                        <MudText Typo="Typo.h5">@firstGameDate.Value.ToLongDateString()</MudText>
                                        <MudChip T="string" Color="Color.Secondary" Size="Size.Small" Variant="Variant.Filled">
                                            Playoffs
                                        </MudChip>
                                    </div>
                                    <MudChip T="string" Color="Color.Primary" Size="Size.Medium" Variant="Variant.Filled">
                                        Week @weekNumber
                                    </MudChip>
                                </div>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="px-0">
                            <MudTable Items="@weekGames"
                                      Dense="true"
                                      Hover="true"
                                      Bordered="true"
                                      Striped="true"
                                      T="ScheduleViewModel">
                                <HeaderContent>
                                    <MudTh Style="width: 80px; text-align: center;">Result</MudTh>
                                    <MudTh>Home Team</MudTh>
                                    <MudTh Style="width: 50px; text-align: center;">vs</MudTh>
                                    <MudTh>Away Team</MudTh>
                                    <MudTh Style="width: 80px; text-align: center;">Result</MudTh>
                                    <MudTh Style="width: 150px;">Table #</MudTh>
                                    <MudTh Style="width: 100px; text-align: center;">Status</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Home Result" Style="text-align: center;">
                                        @if (context.IsComplete && context.WinningTeamId == context.HomeTeamId)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                        }
                                        else if (context.IsComplete)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Home Team">
                                        <div class="d-flex align-center">
                                            @if (context.IsComplete && context.WinningTeamId == context.HomeTeamId)
                                            {
                                                <MudText Typo="Typo.body1" Style="font-weight: bold; color: var(--mud-palette-success);">@context.HomeTeamName</MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body1">@context.HomeTeamName</MudText>
                                            }
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="vs" Style="text-align: center; vertical-align: middle;">
                                        <MudText Typo="Typo.body2" Class="mud-text-secondary">vs</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Away Team">
                                        <div class="d-flex align-center">
                                            @if (context.IsComplete && context.WinningTeamId == context.AwayTeamId)
                                            {
                                                <MudText Typo="Typo.body1" Style="font-weight: bold; color: var(--mud-palette-success);">@context.AwayTeamName</MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body1">@context.AwayTeamName</MudText>
                                            }
                                        </div>
                                    </MudTd>
                                    <MudTd DataLabel="Away Result" Style="text-align: center;">
                                        @if (context.IsComplete && context.WinningTeamId == context.AwayTeamId)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                        }
                                        else if (context.IsComplete)
                                        {
                                            <MudIcon Icon="@Icons.Material.Filled.Cancel" Color="Color.Error" />
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Table #">
                                        @if (context.TableNumber.HasValue)
                                        {
                                            <MudChip T="string" Color="Color.Tertiary" Size="Size.Small" Variant="Variant.Outlined">
                                                @context.TableNumber.Value
                                            </MudChip>
                                        }
                                    </MudTd>
                                    <MudTd DataLabel="Status" Style="text-align: center;">
                                        @if (context.IsComplete)
                                        {
                                            <MudChip T="string" Color="Color.Success" Size="Size.Small" Variant="Variant.Filled">
                                                Complete
                                            </MudChip>
                                        }
                                        else if (context.GameDate.HasValue && context.GameDate.Value.Date < DateTime.Today)
                                        {
                                            <MudChip T="string" Color="Color.Warning" Size="Size.Small" Variant="Variant.Filled">
                                                Pending
                                            </MudChip>
                                        }
                                        else
                                        {
                                            <MudChip T="string" Color="Color.Info" Size="Size.Small" Variant="Variant.Filled">
                                                Scheduled
                                            </MudChip>
                                        }
                                    </MudTd>
                                </RowTemplate>
                                <NoRecordsContent>
                                    <EmptyState Title="No Playoff Games" Message="No playoff games are scheduled for this week." Icon="@Icons.Material.Filled.EventBusy" />
                                </NoRecordsContent>
                            </MudTable>
                        </MudCardContent>
                        <MudCardActions Class="d-flex justify-space-between px-4">
                            <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                @weekGames.Count playoff game@(weekGames.Count == 1 ? "" : "s") scheduled
                            </MudText>
                            <div class="d-flex align-center gap-2">
                                <MudText Typo="Typo.caption" Class="mud-text-secondary">
                                    @weekGames.Count(g => g.IsComplete) completed, @weekGames.Count(g => !g.IsComplete) pending
                                </MudText>
                                @if (weekGames.Any(g => g.IsComplete))
                                {
                                    var completionPercentage = (weekGames.Count(g => g.IsComplete) * 100) / weekGames.Count;
                                    <MudProgressLinear Color="Color.Success"
                                                       Size="Size.Small"
                                                       Value="completionPercentage"
                                                       Style="width: 100px;" />
                                }
                            </div>
                        </MudCardActions>
                    </MudCard>
                </div>
            }
        }
    }
    else
    {
        <EmptyState Title="No Playoff Schedule Available"
                    Message="The playoff schedule hasn't been created yet, or the regular season is still in progress."
                    Icon="@Icons.Material.Filled.EmojiEvents" />
    }
</PageContainer>
<ScrollToTopButton />

@code {
    private MudDatePicker? datePicker;
    private DateTime? selectedDate = DateTime.Today;
    private bool isLoading = true;

    private List<ScheduleViewModel>? allSchedules;
    private IEnumerable<IGrouping<int, ScheduleViewModel>>? playoffSchedulesByWeek;

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayoffSchedule();
    }

    private async Task LoadPlayoffSchedule()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            allSchedules = await ScheduleService.GetAllSchedulesAsync();

            if (allSchedules != null && allSchedules.Any())
            {
                var playoffGames = allSchedules.Where(IsPlayoffGame).ToList();
                playoffSchedulesByWeek = playoffGames
                    .OrderBy(s => s.WeekNumber)
                    .ThenBy(s => s.GameDate)
                    .GroupBy(s => s.WeekNumber);
            }
            else
            {
                playoffSchedulesByWeek = Enumerable.Empty<IGrouping<int, ScheduleViewModel>>();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading playoff schedule: {ex.Message}", Severity.Error);
            playoffSchedulesByWeek = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private bool IsPlayoffGame(ScheduleViewModel schedule)
    {
        var playoffStartDate = new DateTime(2026, 3, 24);
        return schedule.GameDate.HasValue && schedule.GameDate.Value.Date >= playoffStartDate.Date;
    }

    private void SelectedDate(DateTime? newSelectedDate)
    {
        if (newSelectedDate.HasValue)
        {
            selectedDate = newSelectedDate;
            try
            {
                string uri = NavigationManager.Uri;
                var dateString = newSelectedDate.Value.ToString("MM-dd-yyyy");
                if (!string.IsNullOrEmpty(dateString))
                {
                    if (uri.Contains('#'))
                    {
                        uri = uri.Substring(0, uri.IndexOf('#'));
                    }
                    NavigationManager.NavigateTo($"{uri}#{dateString}", replace: true);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error navigating to date: {ex.Message}", Severity.Error);
            }
        }
    }
}