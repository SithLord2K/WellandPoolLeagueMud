@page "/team_rosters"
@attribute [StreamRendering]
@using WellandPoolLeagueMud.Components.Buttons
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Data.Models
@using MudBlazor

<PageTitle>Team Rosters</PageTitle>

@if (teamRosters is not null)
{
    @foreach (var team in teamRosters.Where(t => t.TeamName != "Bye"))
    {
        <MudCard Class="mb-4">
            <MudCardHeader>
                <MudText Typo="Typo.h5" Align="Align.Center" Class="m-auto">@team.TeamName</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@team.Players"
                          Hover="true"
                          Striped="true"
                          Dense="true"
                          T="WPL_Player">
                    <HeaderContent>
                        <MudTh>Player Name</MudTh>
                        <MudTh>Games Played</MudTh>
                        <MudTh>Captain?</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Player Name">@context.FirstName @context.LastName</MudTd>
                        <MudTd DataLabel="Games Played" Style="text-align:center;">
                            @context.GamesPlayed
                        </MudTd>
                        <MudTd DataLabel="Captain?" Style="text-align:center;">
                            @if (context.IsCaptain)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                            }
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
            <MudCardActions Class="d-flex justify-end">
                <MudText Typo="Typo.subtitle2">Roster Size: @team.Players.Count()</MudText>
            </MudCardActions>
        </MudCard>
    }
}
else
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="m-4" />
}

<ScrollToTopButton />

@code {
    [Inject] private RosterHelper rosterHelper { get; set; } = default!;

    private List<TeamRoster>? teamRosters;

    protected override async Task OnInitializedAsync()
    {
        teamRosters = await rosterHelper.GetTeamRostersAsync();
    }
}