@page "/team_rosters"
@attribute [StreamRendering]
@using WellandPoolLeagueMud.Components.Buttons
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using MudBlazor
@using WellandPoolLeagueMud.Components.Shared
@using WellandPoolLeagueMud.Helpers
@inject ITeamService TeamService

<PageTitle>Team Rosters</PageTitle>

<PageContainer Title="Team Rosters">
    @if (teams is null)
    {
        <Loading Message="Loading team rosters..." />
    }
    else
    {
        <div class="d-flex justify-center mb-4">
            <MudTextField @bind-Value="searchString"
                          Placeholder="Search teams or players..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          IconSize="Size.Medium"
                          Class="mt-0"
                          Style="max-width: 400px;"
                          Immediate="true" />
        </div>

        @foreach (var team in filteredTeams)
        {
            <MudCard Class="mb-4" Elevation="3">
                <MudCardHeader>
                    <CardHeaderContent>
                        <div class="d-flex align-center justify-space-between">
                            <MudText Typo="Typo.h5" Color="Color.Primary">@team.TeamName</MudText>
                            @if (!string.IsNullOrEmpty(team.CaptainName))
                            {
                                <MudChip T="string" Icon="@Icons.Material.Filled.Star" Color="Color.Warning" Size="Size.Small" Variant="Variant.Filled">
                                    Captain: @team.CaptainName
                                </MudChip>
                            }
                        </div>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="px-0">
                    @if (team.Players.Any())
                    {
                        <MudTable Items="@team.Players"
                                  Hover="true"
                                  Striped="true"
                                  Dense="true"
                                  T="PlayerViewModel">
                            <HeaderContent>
                                <MudTh>Player Name</MudTh>
                                <MudTh Style="text-align:center;">Games Played</MudTh>
                                <MudTh Style="text-align:center;">Games Won</MudTh>
                                <MudTh Style="text-align:center;">Games Lost</MudTh>
                                <MudTh Style="text-align:center;">Win %</MudTh>
                                <MudTh Style="text-align:center;">Captain</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Player Name">
                                    <div class="d-flex align-center">
                                        <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                            @GetPlayerInitials(context.FullName)
                                        </MudAvatar>
                                        <MudText>@context.FullName</MudText>
                                    </div>
                                </MudTd>
                                <MudTd DataLabel="Games Played" Style="text-align:center;">
                                    <MudChip T="string" Size="Size.Small" Variant="Variant.Text">@context.GamesPlayed</MudChip>
                                </MudTd>
                                <MudTd DataLabel="Games Won" Style="text-align:center;">
                                    <MudChip T="string" Color="Color.Success" Size="Size.Small" Variant="Variant.Text">@context.GamesWon</MudChip>
                                </MudTd>
                                <MudTd DataLabel="Games Lost" Style="text-align:center;">
                                    <MudChip T="string" Color="Color.Error" Size="Size.Small" Variant="Variant.Text">@context.GamesLost</MudChip>
                                </MudTd>
                                <MudTd DataLabel="Win %" Style="text-align:center;">
                                    @if (context.GamesPlayed > 0)
                                    {
                                        <MudChip T="string" Color="@ColorHelper.GetWinPercentageColor(context.WinPercentage)" Size="Size.Small">
                                            @context.WinPercentage.ToString("F1")%
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <MudText Class="mud-text-secondary">-</MudText>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Captain" Style="text-align:center;">
                                    @if (team.CaptainPlayerId == context.PlayerId)
                                    {
                                        <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning" />
                                    }
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                    else
                    {
                        <EmptyState Title="No Players Assigned" Message="No players have been assigned to this team yet." Icon="@Icons.Material.Filled.PersonOff" />
                    }
                </MudCardContent>
                <MudCardActions Class="d-flex justify-space-between px-4">
                    <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">
                        Roster Size: @team.Players.Count
                    </MudText>
                    @if (team.Players.Any())
                    {
                        <div class="d-flex align-center">
                            <MudText Typo="Typo.caption" Class="mud-text-secondary mr-2">Team Record:</MudText>
                            <MudChip T="string" Color="Color.Success" Size="Size.Small" Variant="Variant.Text">@team.WeeksWon W</MudChip>
                            <MudChip T="string" Color="Color.Error" Size="Size.Small" Variant="Variant.Text" Class="ml-1">@team.WeeksLost L</MudChip>
                        </div>
                    }
                </MudCardActions>
            </MudCard>
        }

        @if (!filteredTeams.Any() && !string.IsNullOrWhiteSpace(searchString))
        {
            <EmptyState Title="No Teams Found" Message="Try adjusting your search terms." />
        }
    }
</PageContainer>
<ScrollToTopButton />

@code {
    private List<TeamViewModel>? teams;
    private string searchString = "";

    private IEnumerable<TeamViewModel> filteredTeams =>
        teams?.Where(t => string.IsNullOrWhiteSpace(searchString) ||
                          t.TeamName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                          t.Players.Any(p => p.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase))) ??
        Enumerable.Empty<TeamViewModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTeamRosters();
    }

    private async Task LoadTeamRosters()
    {
        try
        {
            teams = await TeamService.GetAllTeamsAsync();
            if (teams != null)
            {
                foreach (var team in teams)
                {
                    var players =
                        await TeamService.GetTeamRosterAsync(team.TeamId);

                    team.Players = players.OrderByDescending(p => p.WinPercentage).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading team rosters: {ex.Message}");
        }
    }

    private string GetPlayerInitials(string fullName)
    {
        if (string.IsNullOrWhiteSpace(fullName))
            return "?";
        var parts = fullName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[1][0]}".ToUpper();
        else if (parts.Length == 1)
            return $"{parts[0][0]}".ToUpper();

        return "?";
    }
}