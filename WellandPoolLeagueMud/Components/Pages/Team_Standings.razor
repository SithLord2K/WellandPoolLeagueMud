@page "/team_standings"
@attribute [StreamRendering]
@using MudBlazor
@using WellandPoolLeagueMud.Components.Buttons
@using WellandPoolLeagueMud.Data.Services
@using WellandPoolLeagueMud.Data.ViewModels
@using WellandPoolLeagueMud.Components.Shared
@inject ITeamService TeamService
@inject ISnackbar Snackbar

<PageTitle>Team Standings</PageTitle>

<PageContainer Title="Team Standings">
    @if (teamStandings is null)
    {
        <Loading Message="Loading standings..." />
    }
    else
    {
        <MudDataGrid T="TeamStandingViewModel"
                     Items="@teamStandings"
                     Hover="true"
                     Striped="true"
                     Dense="true"
                     Filterable="true"
                     Bordered="true"
                     Class="pb-2">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString"
                              Placeholder="Search teams..."
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0"
                              Immediate="true" />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.Division" Title="Division" Filterable="true" />
                <PropertyColumn Property="x => x.TeamName" Title="Team Name" Filterable="true" />
                <PropertyColumn Property="x => x.CaptainName" Title="Captain" Filterable="true">
                    <CellTemplate>
                        @if (!string.IsNullOrEmpty(context.Item.CaptainName))
                        {
                            <MudText>@context.Item.CaptainName</MudText>
                        }
                        else
                        {
                            <MudText Class="mud-text-secondary">No Captain</MudText>
                        }
                    </CellTemplate>
                </PropertyColumn>
                <PropertyColumn Property="x => x.WeeksWon" Title="Weeks Won" />
                <PropertyColumn Property="x => x.GamesPlayed" Title="Games Played" />
                <PropertyColumn Property="x => x.Wins" Title="Games Won" />
                <PropertyColumn Property="x => x.Losses" Title="Games Lost" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="TeamStandingViewModel" />
            </PagerContent>
            <NoRecordsContent>
                <EmptyState Title="No Team Stats Found!"
                            Message="Team standings will appear here once games are recorded."
                            Icon="@Icons.Material.Filled.Groups" />
            </NoRecordsContent>
        </MudDataGrid>
    }
</PageContainer>

<ScrollToTopButton />

@code {
    private List<TeamStandingViewModel>? teamStandings;
    private string searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadTeamStandings();
    }

    private async Task LoadTeamStandings()
    {
        try
        {
            teamStandings = await TeamService.GetTeamStandingsAsync();

            if (!string.IsNullOrWhiteSpace(searchString))
            {
                teamStandings = teamStandings
                    .Where(t => t.TeamName.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
                                (t.CaptainName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false))
                    .ToList();
            }
        }
        catch
        {
            Snackbar.Add("Error loading team standings. Please try again later.", Severity.Error);
            teamStandings = new List<TeamStandingViewModel>();
        }
    }

    private async Task OnSearchChanged(string value)
    {
        searchString = value;
        await LoadTeamStandings();
        StateHasChanged();
    }
}